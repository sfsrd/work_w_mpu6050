
mpu3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004d98  08004d98  00014d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e58  08004e58  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08004e58  08004e58  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e58  08004e58  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08004e60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000104  08004f64  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004f64  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a3  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e26  00000000  00000000  0002b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a18  00000000  00000000  0002e308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001488d  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ac2  00000000  00000000  000435ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f2ad  00000000  00000000  0004d06f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc31c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a0  00000000  00000000  000bc398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000104 	.word	0x20000104
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d80 	.word	0x08004d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000108 	.word	0x20000108
 800014c:	08004d80 	.word	0x08004d80

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	; 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b24:	f1a2 0201 	sub.w	r2, r2, #1
 8000b28:	d1ed      	bne.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd6:	2afd      	cmp	r2, #253	; 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	; 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	; 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MX_GPIO_Init+0x58>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000

08000f80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <MX_I2C1_Init+0x54>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x58>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fbe:	f001 f915 	bl	80021ec <HAL_I2C_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc8:	f000 f8d7 	bl	800117a <Error_Handler>
  }

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000012c 	.word	0x2000012c
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	000186a0 	.word	0x000186a0

08000fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_I2C_MspInit+0x70>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d123      	bne.n	8001044 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001014:	23c0      	movs	r3, #192	; 0xc0
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001018:	2312      	movs	r3, #18
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_I2C_MspInit+0x78>)
 8001028:	f000 ff86 	bl	8001f38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8001032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001036:	61d3      	str	r3, [r2, #28]
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010c00 	.word	0x40010c00

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	b0a3      	sub	sp, #140	; 0x8c
 800105c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f000 fe03 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f84f 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f7ff ff5d 	bl	8000f24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800106a:	f7ff ff89 	bl	8000f80 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800106e:	f000 fd5f 	bl	8001b30 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001072:	f000 fc21 	bl	80018b8 <MX_SPI1_Init>
  MPU6050_t MPU6050;
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001076:	bf00      	nop
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <main+0xa0>)
 800107a:	f000 f884 	bl	8001186 <MPU6050_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d0f9      	beq.n	8001078 <main+0x20>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <main+0xa0>)
 800108c:	f000 f8d4 	bl	8001238 <MPU6050_Read_All>
	  char msg[31];
	  uint8_t len = sprintf(msg, "Gx%i Gy%i Gz%i\r\n", (uint8_t)MPU6050.Gx, (uint8_t)MPU6050.Gy, (uint8_t)MPU6050.Gz);
 8001090:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001094:	4618      	mov	r0, r3
 8001096:	4621      	mov	r1, r4
 8001098:	f7ff fcc6 	bl	8000a28 <__aeabi_d2uiz>
 800109c:	4603      	mov	r3, r0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461d      	mov	r5, r3
 80010a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	f7ff fcbd 	bl	8000a28 <__aeabi_d2uiz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461e      	mov	r6, r3
 80010b4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	f7ff fcb4 	bl	8000a28 <__aeabi_d2uiz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4638      	mov	r0, r7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4633      	mov	r3, r6
 80010ca:	462a      	mov	r2, r5
 80010cc:	490b      	ldr	r1, [pc, #44]	; (80010fc <main+0xa4>)
 80010ce:	f002 fed5 	bl	8003e7c <siprintf>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  HAL_UART_Transmit(&huart1, (uint8_t)msg, len, HAL_MAX_DELAY);
 80010d8:	463b      	mov	r3, r7
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <main+0xa8>)
 80010ea:	f002 fcd7 	bl	8003a9c <HAL_UART_Transmit>
	  HAL_Delay (100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f000 fe1c 	bl	8001d2c <HAL_Delay>
  {
 80010f4:	e7c6      	b.n	8001084 <main+0x2c>
 80010f6:	bf00      	nop
 80010f8:	2000012c 	.word	0x2000012c
 80010fc:	08004d98 	.word	0x08004d98
 8001100:	200001dc 	.word	0x200001dc

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 feaa 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112e:	2310      	movs	r3, #16
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4618      	mov	r0, r3
 800113c:	f001 ffe4 	bl	8003108 <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001146:	f000 f818 	bl	800117a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fa50 	bl	8003608 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800116e:	f000 f804 	bl	800117a <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3740      	adds	r7, #64	; 0x40
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b088      	sub	sp, #32
 800118a:	af04      	add	r7, sp, #16
 800118c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	f107 030f 	add.w	r3, r7, #15
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2275      	movs	r2, #117	; 0x75
 80011a0:	21d0      	movs	r1, #208	; 0xd0
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f001 fa44 	bl	8002630 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b68      	cmp	r3, #104	; 0x68
 80011ac:	d13d      	bne.n	800122a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	f107 030e 	add.w	r3, r7, #14
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	226b      	movs	r2, #107	; 0x6b
 80011c4:	21d0      	movs	r1, #208	; 0xd0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f938 	bl	800243c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80011cc:	2307      	movs	r3, #7
 80011ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2219      	movs	r2, #25
 80011e2:	21d0      	movs	r1, #208	; 0xd0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f001 f929 	bl	800243c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	f107 030e 	add.w	r3, r7, #14
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	221c      	movs	r2, #28
 8001200:	21d0      	movs	r1, #208	; 0xd0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f001 f91a 	bl	800243c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	221b      	movs	r2, #27
 800121e:	21d0      	movs	r1, #208	; 0xd0
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f001 f90b 	bl	800243c <HAL_I2C_Mem_Write>
        return 0;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <MPU6050_Init+0xa6>
    }
    return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0000      	movs	r0, r0
	...

08001238 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800123c:	b094      	sub	sp, #80	; 0x50
 800123e:	af04      	add	r7, sp, #16
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	230e      	movs	r3, #14
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	223b      	movs	r2, #59	; 0x3b
 8001256:	21d0      	movs	r1, #208	; 0xd0
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f001 f9e9 	bl	8002630 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800125e:	7a3b      	ldrb	r3, [r7, #8]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7a7b      	ldrb	r3, [r7, #9]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001270:	7abb      	ldrb	r3, [r7, #10]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21a      	sxth	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001282:	7b3b      	ldrb	r3, [r7, #12]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80012a2:	7c3b      	ldrb	r3, [r7, #16]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7c7b      	ldrb	r3, [r7, #17]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80012b4:	7cbb      	ldrb	r3, [r7, #18]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7cfb      	ldrb	r3, [r7, #19]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80012c6:	7d3b      	ldrb	r3, [r7, #20]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7d7b      	ldrb	r3, [r7, #21]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f888 	bl	80003f4 <__aeabi_i2d>
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4bb7      	ldr	r3, [pc, #732]	; (80015c8 <MPU6050_Read_All+0x390>)
 80012ea:	f7ff fa17 	bl	800071c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	6839      	ldr	r1, [r7, #0]
 80012f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f878 	bl	80003f4 <__aeabi_i2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4baf      	ldr	r3, [pc, #700]	; (80015c8 <MPU6050_Read_All+0x390>)
 800130a:	f7ff fa07 	bl	800071c <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f868 	bl	80003f4 <__aeabi_i2d>
 8001324:	a3a2      	add	r3, pc, #648	; (adr r3, 80015b0 <MPU6050_Read_All+0x378>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff f9f7 	bl	800071c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001338:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fc4d 	bl	8000bdc <__aeabi_i2f>
 8001342:	4603      	mov	r3, r0
 8001344:	49a1      	ldr	r1, [pc, #644]	; (80015cc <MPU6050_Read_All+0x394>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fd50 	bl	8000dec <__aeabi_fdiv>
 800134c:	4603      	mov	r3, r0
 800134e:	49a0      	ldr	r1, [pc, #640]	; (80015d0 <MPU6050_Read_All+0x398>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fb8f 	bl	8000a74 <__addsf3>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f845 	bl	80003f4 <__aeabi_i2d>
 800136a:	a393      	add	r3, pc, #588	; (adr r3, 80015b8 <MPU6050_Read_All+0x380>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f9d4 	bl	800071c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f835 	bl	80003f4 <__aeabi_i2d>
 800138a:	a38b      	add	r3, pc, #556	; (adr r3, 80015b8 <MPU6050_Read_All+0x380>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f9c4 	bl	800071c <__aeabi_ddiv>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f825 	bl	80003f4 <__aeabi_i2d>
 80013aa:	a383      	add	r3, pc, #524	; (adr r3, 80015b8 <MPU6050_Read_All+0x380>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff f9b4 	bl	800071c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	6839      	ldr	r1, [r7, #0]
 80013ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80013be:	f000 fcab 	bl	8001d18 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b83      	ldr	r3, [pc, #524]	; (80015d4 <MPU6050_Read_All+0x39c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f802 	bl	80003d4 <__aeabi_ui2d>
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b80      	ldr	r3, [pc, #512]	; (80015d8 <MPU6050_Read_All+0x3a0>)
 80013d6:	f7ff f9a1 	bl	800071c <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80013e2:	f000 fc99 	bl	8001d18 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b7a      	ldr	r3, [pc, #488]	; (80015d4 <MPU6050_Read_All+0x39c>)
 80013ea:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	461a      	mov	r2, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001404:	4619      	mov	r1, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800140c:	fb03 f301 	mul.w	r3, r3, r1
 8001410:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe ffee 	bl	80003f4 <__aeabi_i2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f003 face 	bl	80049c0 <sqrt>
 8001424:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001434:	f7ff fab0 	bl	8000998 <__aeabi_dcmpeq>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d119      	bne.n	8001472 <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe ffd5 	bl	80003f4 <__aeabi_i2d>
 800144a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800144e:	f7ff f965 	bl	800071c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f003 f921 	bl	80046a0 <atan>
 800145e:	a358      	add	r3, pc, #352	; (adr r3, 80015c0 <MPU6050_Read_All+0x388>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f830 	bl	80004c8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001470:	e005      	b.n	800147e <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	425b      	negs	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffb4 	bl	80003f4 <__aeabi_i2d>
 800148c:	4682      	mov	sl, r0
 800148e:	468b      	mov	fp, r1
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffac 	bl	80003f4 <__aeabi_i2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4650      	mov	r0, sl
 80014a2:	4659      	mov	r1, fp
 80014a4:	f003 fa8a 	bl	80049bc <atan2>
 80014a8:	a345      	add	r3, pc, #276	; (adr r3, 80015c0 <MPU6050_Read_All+0x388>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f80b 	bl	80004c8 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <MPU6050_Read_All+0x3a4>)
 80014c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014c4:	f7ff fa72 	bl	80009ac <__aeabi_dcmplt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00a      	beq.n	80014e4 <MPU6050_Read_All+0x2ac>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <MPU6050_Read_All+0x3a8>)
 80014da:	f7ff fa85 	bl	80009e8 <__aeabi_dcmpgt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d114      	bne.n	800150e <MPU6050_Read_All+0x2d6>
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <MPU6050_Read_All+0x3a8>)
 80014ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014ee:	f7ff fa7b 	bl	80009e8 <__aeabi_dcmpgt>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d015      	beq.n	8001524 <MPU6050_Read_All+0x2ec>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <MPU6050_Read_All+0x3a4>)
 8001504:	f7ff fa52 	bl	80009ac <__aeabi_dcmplt>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 800150e:	4935      	ldr	r1, [pc, #212]	; (80015e4 <MPU6050_Read_All+0x3ac>)
 8001510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001514:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800151e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001522:	e012      	b.n	800154a <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800152a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800152e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001532:	e9cd 2300 	strd	r2, r3, [sp]
 8001536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153a:	482a      	ldr	r0, [pc, #168]	; (80015e4 <MPU6050_Read_All+0x3ac>)
 800153c:	f000 f856 	bl	80015ec <Kalman_getAngle>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001550:	4690      	mov	r8, r2
 8001552:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MPU6050_Read_All+0x3a8>)
 800155c:	4640      	mov	r0, r8
 800155e:	4649      	mov	r1, r9
 8001560:	f7ff fa42 	bl	80009e8 <__aeabi_dcmpgt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001570:	4614      	mov	r4, r2
 8001572:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001582:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001586:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800158a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800158e:	e9cd 3400 	strd	r3, r4, [sp]
 8001592:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MPU6050_Read_All+0x3b0>)
 8001598:	f000 f828 	bl	80015ec <Kalman_getAngle>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 80015a6:	bf00      	nop
 80015a8:	3740      	adds	r7, #64	; 0x40
 80015aa:	46bd      	mov	sp, r7
 80015ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40cc2900 	.word	0x40cc2900
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40606000 	.word	0x40606000
 80015c0:	1a63c1f8 	.word	0x1a63c1f8
 80015c4:	404ca5dc 	.word	0x404ca5dc
 80015c8:	40d00000 	.word	0x40d00000
 80015cc:	43aa0000 	.word	0x43aa0000
 80015d0:	42121eb8 	.word	0x42121eb8
 80015d4:	20000180 	.word	0x20000180
 80015d8:	408f4000 	.word	0x408f4000
 80015dc:	c0568000 	.word	0xc0568000
 80015e0:	40568000 	.word	0x40568000
 80015e4:	20000048 	.word	0x20000048
 80015e8:	20000000 	.word	0x20000000

080015ec <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b092      	sub	sp, #72	; 0x48
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f103 0420 	add.w	r4, r3, #32
 80015fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001602:	461a      	mov	r2, r3
 8001604:	4623      	mov	r3, r4
 8001606:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800160a:	f7fe fda5 	bl	8000158 <__aeabi_dsub>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800161c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001620:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001624:	f7fe ff50 	bl	80004c8 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7fe fd94 	bl	800015c <__adddf3>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800164a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800164e:	f7fe ff3b 	bl	80004c8 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001660:	f7fe fd7a 	bl	8000158 <__aeabi_dsub>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001672:	f7fe fd71 	bl	8000158 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fd6a 	bl	800015c <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001694:	f7fe ff18 	bl	80004c8 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fd5c 	bl	800015c <__adddf3>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016be:	f7fe ff03 	bl	80004c8 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe fd45 	bl	8000158 <__aeabi_dsub>
 80016ce:	4603      	mov	r3, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016e8:	f7fe feee 	bl	80004c8 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fd30 	bl	8000158 <__aeabi_dsub>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800170e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001712:	f7fe fed9 	bl	80004c8 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7fe fd1d 	bl	800015c <__adddf3>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f103 0410 	add.w	r4, r3, #16
 8001738:	e9d4 3400 	ldrd	r3, r4, [r4]
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	f7fe fd0c 	bl	800015c <__adddf3>
 8001744:	4603      	mov	r3, r0
 8001746:	460c      	mov	r4, r1
 8001748:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001752:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001756:	f7fe ffe1 	bl	800071c <__aeabi_ddiv>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800176c:	f7fe ffd6 	bl	800071c <__aeabi_ddiv>
 8001770:	4603      	mov	r3, r0
 8001772:	460c      	mov	r4, r1
 8001774:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f103 0418 	add.w	r4, r3, #24
 800177e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800178a:	f7fe fce5 	bl	8000158 <__aeabi_dsub>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800179c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017a4:	f7fe fe90 	bl	80004c8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fcd4 	bl	800015c <__adddf3>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80017c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017cc:	f7fe fe7c 	bl	80004c8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fcc0 	bl	800015c <__adddf3>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80017ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80017f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80017fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80017fe:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001808:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800180c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001810:	f7fe fe5a 	bl	80004c8 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fc9c 	bl	8000158 <__aeabi_dsub>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001830:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001834:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001838:	f7fe fe46 	bl	80004c8 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fc88 	bl	8000158 <__aeabi_dsub>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001858:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800185c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001860:	f7fe fe32 	bl	80004c8 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4620      	mov	r0, r4
 800186a:	4629      	mov	r1, r5
 800186c:	f7fe fc74 	bl	8000158 <__aeabi_dsub>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001880:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001884:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001888:	f7fe fe1e 	bl	80004c8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fc60 	bl	8000158 <__aeabi_dsub>
 8001898:	4603      	mov	r3, r0
 800189a:	460c      	mov	r4, r1
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f103 0418 	add.w	r4, r3, #24
 80018a8:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 80018ac:	4618      	mov	r0, r3
 80018ae:	4621      	mov	r1, r4
 80018b0:	3748      	adds	r7, #72	; 0x48
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_SPI1_Init+0x64>)
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <MX_SPI1_Init+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_SPI1_Init+0x64>)
 80018c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_SPI1_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_SPI1_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_SPI1_Init+0x64>)
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_SPI1_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_SPI1_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_SPI1_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <MX_SPI1_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_SPI1_Init+0x64>)
 8001904:	220a      	movs	r2, #10
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <MX_SPI1_Init+0x64>)
 800190a:	f002 f819 	bl	8003940 <HAL_SPI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001914:	f7ff fc31 	bl	800117a <Error_Handler>
  }

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000184 	.word	0x20000184
 8001920:	40013000 	.word	0x40013000

08001924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_SPI_MspInit+0x88>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d12f      	bne.n	80019a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_SPI_MspInit+0x8c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_SPI_MspInit+0x8c>)
 800194a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_SPI_MspInit+0x8c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_SPI_MspInit+0x8c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <HAL_SPI_MspInit+0x8c>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_SPI_MspInit+0x8c>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001974:	23a0      	movs	r3, #160	; 0xa0
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <HAL_SPI_MspInit+0x90>)
 8001988:	f000 fad6 	bl	8001f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_SPI_MspInit+0x90>)
 80019a0:	f000 faca 	bl	8001f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013000 	.word	0x40013000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010800 	.word	0x40010800

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_MspInit+0x5c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_MspInit+0x5c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_MspInit+0x5c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_MspInit+0x5c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_MspInit+0x60>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_MspInit+0x60>)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <HardFault_Handler+0x4>

08001a2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <MemManage_Handler+0x4>

08001a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <BusFault_Handler+0x4>

08001a3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <UsageFault_Handler+0x4>

08001a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f944 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x50>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x16>
		heap_end = &end;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <_sbrk+0x50>)
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <_sbrk+0x54>)
 8001a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <_sbrk+0x50>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <_sbrk+0x50>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	466a      	mov	r2, sp
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d907      	bls.n	8001aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a9a:	f002 f9bd 	bl	8003e18 <__errno>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa8:	e006      	b.n	8001ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <_sbrk+0x50>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <_sbrk+0x50>)
 8001ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000120 	.word	0x20000120
 8001ac4:	20000228 	.word	0x20000228

08001ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <SystemInit+0x5c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <SystemInit+0x5c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <SystemInit+0x5c>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4911      	ldr	r1, [pc, #68]	; (8001b24 <SystemInit+0x5c>)
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <SystemInit+0x60>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <SystemInit+0x5c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <SystemInit+0x5c>)
 8001aea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <SystemInit+0x5c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SystemInit+0x5c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <SystemInit+0x5c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <SystemInit+0x5c>)
 8001b06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SystemInit+0x5c>)
 8001b0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SystemInit+0x64>)
 8001b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	f8ff0000 	.word	0xf8ff0000
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_USART1_UART_Init+0x50>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b68:	f001 ff4b 	bl	8003a02 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b72:	f7ff fb02 	bl	800117a <Error_Handler>
  }

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200001dc 	.word	0x200001dc
 8001b80:	40013800 	.word	0x40013800

08001b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_UART_MspInit+0x8c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d131      	bne.n	8001c08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	480b      	ldr	r0, [pc, #44]	; (8001c18 <HAL_UART_MspInit+0x94>)
 8001bea:	f000 f9a5 	bl	8001f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0x94>)
 8001c04:	f000 f998 	bl	8001f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010800 	.word	0x40010800

08001c1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c1e:	e003      	b.n	8001c28 <LoopCopyDataInit>

08001c20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c26:	3104      	adds	r1, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c28:	480a      	ldr	r0, [pc, #40]	; (8001c54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c30:	d3f6      	bcc.n	8001c20 <CopyDataInit>
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c34:	e002      	b.n	8001c3c <LoopFillZerobss>

08001c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c38:	f842 3b04 	str.w	r3, [r2], #4

08001c3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c40:	d3f9      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c42:	f7ff ff41 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c46:	f002 f8ed 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4a:	f7ff fa05 	bl	8001058 <main>
  bx lr
 8001c4e:	4770      	bx	lr
  ldr r3, =_sidata
 8001c50:	08004e60 	.word	0x08004e60
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c58:	20000104 	.word	0x20000104
  ldr r2, =_sbss
 8001c5c:	20000104 	.word	0x20000104
  ldr r3, = _ebss
 8001c60:	20000224 	.word	0x20000224

08001c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC1_2_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_Init+0x28>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_Init+0x28>)
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f929 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 f808 	bl	8001c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c84:	f7ff fe98 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x54>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x58>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f933 	bl	8001f1e <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00e      	b.n	8001ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d80a      	bhi.n	8001cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd0:	f000 f909 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_InitTick+0x5c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000090 	.word	0x20000090
 8001cec:	20000098 	.word	0x20000098
 8001cf0:	20000094 	.word	0x20000094

08001cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x1c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_IncTick+0x20>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_IncTick+0x20>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	20000098 	.word	0x20000098
 8001d14:	2000021c 	.word	0x2000021c

08001d18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <HAL_GetTick+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	2000021c 	.word	0x2000021c

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff fff0 	bl	8001d18 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_Delay+0x40>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffe0 	bl	8001d18 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000098 	.word	0x20000098

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb0:	f7ff ff90 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff49 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff5e 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff90 	bl	8001e28 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffb0 	bl	8001e8c <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b08b      	sub	sp, #44	; 0x2c
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4a:	e127      	b.n	800219c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 8116 	bne.w	8002196 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d034      	beq.n	8001fdc <HAL_GPIO_Init+0xa4>
 8001f72:	2b12      	cmp	r3, #18
 8001f74:	d80d      	bhi.n	8001f92 <HAL_GPIO_Init+0x5a>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d02b      	beq.n	8001fd2 <HAL_GPIO_Init+0x9a>
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d804      	bhi.n	8001f88 <HAL_GPIO_Init+0x50>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d031      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e048      	b.n	800201a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d043      	beq.n	8002014 <HAL_GPIO_Init+0xdc>
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_GPIO_Init+0x90>
          break;
 8001f90:	e043      	b.n	800201a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f92:	4a89      	ldr	r2, [pc, #548]	; (80021b8 <HAL_GPIO_Init+0x280>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d026      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001f98:	4a87      	ldr	r2, [pc, #540]	; (80021b8 <HAL_GPIO_Init+0x280>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d806      	bhi.n	8001fac <HAL_GPIO_Init+0x74>
 8001f9e:	4a87      	ldr	r2, [pc, #540]	; (80021bc <HAL_GPIO_Init+0x284>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d020      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001fa4:	4a86      	ldr	r2, [pc, #536]	; (80021c0 <HAL_GPIO_Init+0x288>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
          break;
 8001faa:	e036      	b.n	800201a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fac:	4a85      	ldr	r2, [pc, #532]	; (80021c4 <HAL_GPIO_Init+0x28c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001fb2:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <HAL_GPIO_Init+0x290>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d016      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001fb8:	4a84      	ldr	r2, [pc, #528]	; (80021cc <HAL_GPIO_Init+0x294>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
          break;
 8001fbe:	e02c      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e028      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e023      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	623b      	str	r3, [r7, #32]
          break;
 8001fda:	e01e      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	623b      	str	r3, [r7, #32]
          break;
 8001fe4:	e019      	b.n	800201a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e012      	b.n	800201a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	611a      	str	r2, [r3, #16]
          break;
 8002006:	e008      	b.n	800201a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002008:	2308      	movs	r3, #8
 800200a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	615a      	str	r2, [r3, #20]
          break;
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2bff      	cmp	r3, #255	; 0xff
 800201e:	d801      	bhi.n	8002024 <HAL_GPIO_Init+0xec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	e001      	b.n	8002028 <HAL_GPIO_Init+0xf0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d802      	bhi.n	8002036 <HAL_GPIO_Init+0xfe>
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x104>
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3b08      	subs	r3, #8
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	210f      	movs	r1, #15
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	401a      	ands	r2, r3
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	431a      	orrs	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8096 	beq.w	8002196 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_GPIO_Init+0x298>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x298>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_GPIO_Init+0x298>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002082:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_GPIO_Init+0x29c>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x2a0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x19e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x19a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x2a8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x196>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_GPIO_Init+0x2ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x192>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020d6:	2300      	movs	r3, #0
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020e8:	493a      	ldr	r1, [pc, #232]	; (80021d4 <HAL_GPIO_Init+0x29c>)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4938      	ldr	r1, [pc, #224]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
 800210e:	e006      	b.n	800211e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4933      	ldr	r1, [pc, #204]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	492e      	ldr	r1, [pc, #184]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e006      	b.n	8002146 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	4929      	ldr	r1, [pc, #164]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002142:	4013      	ands	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	4924      	ldr	r1, [pc, #144]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	43db      	mvns	r3, r3
 8002168:	491f      	ldr	r1, [pc, #124]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800216a:	4013      	ands	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	491a      	ldr	r1, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
 8002186:	e006      	b.n	8002196 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4915      	ldr	r1, [pc, #84]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002192:	4013      	ands	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f aed0 	bne.w	8001f4c <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	372c      	adds	r7, #44	; 0x2c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	10210000 	.word	0x10210000
 80021bc:	10110000 	.word	0x10110000
 80021c0:	10120000 	.word	0x10120000
 80021c4:	10310000 	.word	0x10310000
 80021c8:	10320000 	.word	0x10320000
 80021cc:	10220000 	.word	0x10220000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40010800 	.word	0x40010800
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40011400 	.word	0x40011400
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e10f      	b.n	800241e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fee2 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2224      	movs	r2, #36	; 0x24
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002230:	f001 fb40 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a7b      	ldr	r2, [pc, #492]	; (8002428 <HAL_I2C_Init+0x23c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d807      	bhi.n	8002250 <HAL_I2C_Init+0x64>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a7a      	ldr	r2, [pc, #488]	; (800242c <HAL_I2C_Init+0x240>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e006      	b.n	800225e <HAL_I2C_Init+0x72>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a77      	ldr	r2, [pc, #476]	; (8002430 <HAL_I2C_Init+0x244>)
 8002254:	4293      	cmp	r3, r2
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0db      	b.n	800241e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_I2C_Init+0x248>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0c9b      	lsrs	r3, r3, #18
 8002270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a64      	ldr	r2, [pc, #400]	; (8002428 <HAL_I2C_Init+0x23c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d802      	bhi.n	80022a0 <HAL_I2C_Init+0xb4>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3301      	adds	r3, #1
 800229e:	e009      	b.n	80022b4 <HAL_I2C_Init+0xc8>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	4a63      	ldr	r2, [pc, #396]	; (8002438 <HAL_I2C_Init+0x24c>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	3301      	adds	r3, #1
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4956      	ldr	r1, [pc, #344]	; (8002428 <HAL_I2C_Init+0x23c>)
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d80d      	bhi.n	80022f0 <HAL_I2C_Init+0x104>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e59      	subs	r1, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	bf38      	it	cc
 80022ec:	2304      	movcc	r3, #4
 80022ee:	e04f      	b.n	8002390 <HAL_I2C_Init+0x1a4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_I2C_Init+0x130>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e012      	b.n	8002342 <HAL_I2C_Init+0x156>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x15e>
 8002346:	2301      	movs	r3, #1
 8002348:	e022      	b.n	8002390 <HAL_I2C_Init+0x1a4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10e      	bne.n	8002370 <HAL_I2C_Init+0x184>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e58      	subs	r0, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	440b      	add	r3, r1
 8002360:	fbb0 f3f3 	udiv	r3, r0, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	e00f      	b.n	8002390 <HAL_I2C_Init+0x1a4>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	6809      	ldr	r1, [r1, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6911      	ldr	r1, [r2, #16]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68d2      	ldr	r2, [r2, #12]
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	000186a0 	.word	0x000186a0
 800242c:	001e847f 	.word	0x001e847f
 8002430:	003d08ff 	.word	0x003d08ff
 8002434:	431bde83 	.word	0x431bde83
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002456:	f7ff fc5f 	bl	8001d18 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	f040 80d9 	bne.w	800261c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	2201      	movs	r2, #1
 8002472:	496d      	ldr	r1, [pc, #436]	; (8002628 <HAL_I2C_Mem_Write+0x1ec>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fc6b 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	e0cc      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_I2C_Mem_Write+0x56>
 800248e:	2302      	movs	r3, #2
 8002490:	e0c5      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d007      	beq.n	80024b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2221      	movs	r2, #33	; 0x21
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a4d      	ldr	r2, [pc, #308]	; (800262c <HAL_I2C_Mem_Write+0x1f0>)
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fa:	88f8      	ldrh	r0, [r7, #6]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4603      	mov	r3, r0
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fac6 	bl	8002a9c <I2C_RequestMemoryWrite>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d052      	beq.n	80025bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e081      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fcec 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d11b      	bne.n	80025bc <HAL_I2C_Mem_Write+0x180>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1aa      	bne.n	800251a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fcd8 	bl	8002f7e <I2C_WaitOnBTFFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e016      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	00100002 	.word	0x00100002
 800262c:	ffff0000 	.word	0xffff0000

08002630 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	; 0x30
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	460b      	mov	r3, r1
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264a:	f7ff fb65 	bl	8001d18 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	f040 8218 	bne.w	8002a8e <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2319      	movs	r3, #25
 8002664:	2201      	movs	r2, #1
 8002666:	4981      	ldr	r1, [pc, #516]	; (800286c <HAL_I2C_Mem_Read+0x23c>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fb71 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
 8002676:	e20b      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_I2C_Mem_Read+0x56>
 8002682:	2302      	movs	r3, #2
 8002684:	e204      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d007      	beq.n	80026ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2222      	movs	r2, #34	; 0x22
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a61      	ldr	r2, [pc, #388]	; (8002870 <HAL_I2C_Mem_Read+0x240>)
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ee:	88f8      	ldrh	r0, [r7, #6]
 80026f0:	893a      	ldrh	r2, [r7, #8]
 80026f2:	8979      	ldrh	r1, [r7, #10]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4603      	mov	r3, r0
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa56 	bl	8002bb0 <I2C_RequestMemoryRead>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e1c0      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e194      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	2b01      	cmp	r3, #1
 8002744:	d11d      	bne.n	8002782 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002754:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002756:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800277e:	b662      	cpsie	i
 8002780:	e172      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b02      	cmp	r3, #2
 8002788:	d11d      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002798:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800279a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027c2:	b662      	cpsie	i
 80027c4:	e150      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027ec:	e13c      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	f200 80f5 	bhi.w	80029e2 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d123      	bne.n	8002848 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fbfb 	bl	8003000 <I2C_WaitOnRXNEFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e13d      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002846:	e10f      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b02      	cmp	r3, #2
 800284e:	d150      	bne.n	80028f2 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	2200      	movs	r2, #0
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_I2C_Mem_Read+0x244>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa78 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e112      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
 800286a:	bf00      	nop
 800286c:	00100002 	.word	0x00100002
 8002870:	ffff0000 	.word	0xffff0000
 8002874:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028bc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f0:	e0ba      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	2200      	movs	r2, #0
 80028fa:	4967      	ldr	r1, [pc, #412]	; (8002a98 <HAL_I2C_Mem_Read+0x468>)
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa27 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0c1      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800291c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	2200      	movs	r2, #0
 8002958:	494f      	ldr	r1, [pc, #316]	; (8002a98 <HAL_I2C_Mem_Read+0x468>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f9f8 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e092      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029ac:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e0:	e042      	b.n	8002a68 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fb0a 	bl	8003000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e04c      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d118      	bne.n	8002a68 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f aebe 	bne.w	80027ee <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	00010004 	.word	0x00010004

08002a9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	813b      	strh	r3, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f93c 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e05f      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	492d      	ldr	r1, [pc, #180]	; (8002bac <I2C_RequestMemoryWrite+0x110>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f980 	bl	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04c      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f9ea 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e02b      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e021      	b.n	8002ba0 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9c4 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e005      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00010002 	.word	0x00010002

08002bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f8aa 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09e      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	494c      	ldr	r1, [pc, #304]	; (8002d4c <I2C_RequestMemoryRead+0x19c>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f8ee 	bl	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e08b      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f958 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d107      	bne.n	8002c6a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06a      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c74:	893b      	ldrh	r3, [r7, #8]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e021      	b.n	8002cc4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c80:	893b      	ldrh	r3, [r7, #8]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f932 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e044      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc6:	6a39      	ldr	r1, [r7, #32]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f917 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d107      	bne.n	8002cec <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e029      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f81f 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e013      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d1c:	897b      	ldrh	r3, [r7, #10]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	6a3a      	ldr	r2, [r7, #32]
 8002d30:	4906      	ldr	r1, [pc, #24]	; (8002d4c <I2C_RequestMemoryRead+0x19c>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f863 	bl	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	00010002 	.word	0x00010002

08002d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d60:	e025      	b.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d68:	d021      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7fe ffd5 	bl	8001d18 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d116      	bne.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e023      	b.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10d      	bne.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	e00c      	b.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d0b6      	beq.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e0c:	e051      	b.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1c:	d123      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0204 	orr.w	r2, r3, #4
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e046      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6c:	d021      	beq.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7fe ff53 	bl	8001d18 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e020      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10c      	bne.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e00b      	b.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d18d      	bne.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f08:	e02d      	b.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f8ce 	bl	80030ac <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e02d      	b.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f20:	d021      	beq.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fef9 	bl	8001d18 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e007      	b.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d1ca      	bne.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f8a:	e02d      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f88d 	bl	80030ac <I2C_IsAcknowledgeFailed>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e02d      	b.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa2:	d021      	beq.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fe feb8 	bl	8001d18 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d1ca      	bne.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800300c:	e042      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b10      	cmp	r3, #16
 800301a:	d119      	bne.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0210 	mvn.w	r2, #16
 8003024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e029      	b.n	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003050:	f7fe fe62 	bl	8001d18 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	d302      	bcc.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d1b5      	bne.n	800300e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d11b      	bne.n	80030fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e26c      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8087 	beq.w	8003236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003128:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	d00c      	beq.n	800314e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003134:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d112      	bne.n	8003166 <HAL_RCC_OscConfig+0x5e>
 8003140:	4b8c      	ldr	r3, [pc, #560]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06c      	beq.n	8003234 <HAL_RCC_OscConfig+0x12c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d168      	bne.n	8003234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e246      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x76>
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7f      	ldr	r2, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x98>
 8003186:	4b7b      	ldr	r3, [pc, #492]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xbc>
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a71      	ldr	r2, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 80031c4:	4b6b      	ldr	r3, [pc, #428]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6a      	ldr	r2, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b68      	ldr	r3, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a67      	ldr	r2, [pc, #412]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe fd98 	bl	8001d18 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fd94 	bl	8001d18 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1fa      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xe4>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fd84 	bl	8001d18 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fd80 	bl	8001d18 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1e6      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x10c>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003242:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800324e:	4b49      	ldr	r3, [pc, #292]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x18c>
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1ba      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4939      	ldr	r1, [pc, #228]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x270>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fe fd39 	bl	8001d18 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fd35 	bl	8001d18 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e19b      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4927      	ldr	r1, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x270>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fd18 	bl	8001d18 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fd14 	bl	8001d18 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e17a      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03a      	beq.n	800338c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d019      	beq.n	8003352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_RCC_OscConfig+0x274>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fe fcf8 	bl	8001d18 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fcf4 	bl	8001d18 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e15a      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334a:	2001      	movs	r0, #1
 800334c:	f000 fada 	bl	8003904 <RCC_Delay>
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_OscConfig+0x274>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fe fcde 	bl	8001d18 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe fcda 	bl	8001d18 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e140      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	42420000 	.word	0x42420000
 800337c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b9e      	ldr	r3, [pc, #632]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e9      	bne.n	8003360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a6 	beq.w	80034e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b97      	ldr	r3, [pc, #604]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4a93      	ldr	r2, [pc, #588]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	61d3      	str	r3, [r2, #28]
 80033b6:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d118      	bne.n	8003404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d2:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a8a      	ldr	r2, [pc, #552]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033de:	f7fe fc9b 	bl	8001d18 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fe fc97 	bl	8001d18 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	; 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0fd      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x312>
 800340c:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a7a      	ldr	r2, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	e02d      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x334>
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	e01c      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d10c      	bne.n	800345e <HAL_RCC_OscConfig+0x356>
 8003444:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a6c      	ldr	r2, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a69      	ldr	r2, [pc, #420]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	e00b      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800345e:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a66      	ldr	r2, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d015      	beq.n	80034aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe fc4b 	bl	8001d18 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fc47 	bl	8001d18 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0ab      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ee      	beq.n	8003486 <HAL_RCC_OscConfig+0x37e>
 80034a8:	e014      	b.n	80034d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fc35 	bl	8001d18 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fc31 	bl	8001d18 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e095      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ee      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b48      	ldr	r3, [pc, #288]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a47      	ldr	r2, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8081 	beq.w	80035f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f0:	4b42      	ldr	r3, [pc, #264]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d061      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d146      	bne.n	8003592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_OscConfig+0x4fc>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe fc05 	bl	8001d18 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fc01 	bl	8001d18 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e067      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	4b35      	ldr	r3, [pc, #212]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	492d      	ldr	r1, [pc, #180]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a19      	ldr	r1, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	430b      	orrs	r3, r1
 800355e:	4927      	ldr	r1, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4fc>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fbd5 	bl	8001d18 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fbd1 	bl	8001d18 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e037      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x46a>
 8003590:	e02f      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_OscConfig+0x4fc>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fbbe 	bl	8001d18 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fbba 	bl	8001d18 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e020      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x498>
 80035be:	e018      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e013      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
 8003604:	42420060 	.word	0x42420060

08003608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d0      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b67      	ldr	r3, [pc, #412]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	4965      	ldr	r1, [pc, #404]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800366e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d040      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e073      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4936      	ldr	r1, [pc, #216]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fb0e 	bl	8001d18 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fb0a 	bl	8001d18 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e053      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d210      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4922      	ldr	r1, [pc, #136]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4601      	mov	r1, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	fa21 f303 	lsr.w	r3, r1, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1cc>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1d0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fa6c 	bl	8001c94 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40022000 	.word	0x40022000
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08004dc0 	.word	0x08004dc0
 80037d4:	20000090 	.word	0x20000090
 80037d8:	20000094 	.word	0x20000094

080037dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	b490      	push	{r4, r7}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037e4:	1d3c      	adds	r4, r7, #4
 80037e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b04      	cmp	r3, #4
 8003814:	d002      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x40>
 8003816:	2b08      	cmp	r3, #8
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x46>
 800381a:	e02d      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800381e:	623b      	str	r3, [r7, #32]
      break;
 8003820:	e02d      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	0c9b      	lsrs	r3, r3, #18
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800382e:	4413      	add	r3, r2
 8003830:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003834:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c5b      	lsrs	r3, r3, #17
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800384e:	4413      	add	r3, r2
 8003850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003854:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800385a:	fb02 f203 	mul.w	r2, r2, r3
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e004      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <HAL_RCC_GetSysClockFreq+0xc0>)
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	623b      	str	r3, [r7, #32]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800387a:	623b      	str	r3, [r7, #32]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6a3b      	ldr	r3, [r7, #32]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc90      	pop	{r4, r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	08004dac 	.word	0x08004dac
 8003890:	08004dbc 	.word	0x08004dbc
 8003894:	40021000 	.word	0x40021000
 8003898:	007a1200 	.word	0x007a1200
 800389c:	003d0900 	.word	0x003d0900

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000090 	.word	0x20000090

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff2 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038bc:	4601      	mov	r1, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08004dd0 	.word	0x08004dd0

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffde 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038e4:	4601      	mov	r1, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0adb      	lsrs	r3, r3, #11
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4a03      	ldr	r2, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	08004dd0 	.word	0x08004dd0

08003904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RCC_Delay+0x34>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <RCC_Delay+0x38>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003920:	bf00      	nop
  }
  while (Delay --);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	60fa      	str	r2, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <RCC_Delay+0x1c>
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000090 	.word	0x20000090
 800393c:	10624dd3 	.word	0x10624dd3

08003940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e053      	b.n	80039fa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fd ffd9 	bl	8001924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003988:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	ea42 0103 	orr.w	r1, r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	0c1a      	lsrs	r2, r3, #16
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 0204 	and.w	r2, r2, #4
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e03f      	b.n	8003a94 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fe f8ab 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2224      	movs	r2, #36	; 0x24
 8003a32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f90c 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	f040 8083 	bne.w	8003bc4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_UART_Transmit+0x2e>
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07b      	b.n	8003bc6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_UART_Transmit+0x40>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e074      	b.n	8003bc6 <HAL_UART_Transmit+0x12a>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2221      	movs	r2, #33	; 0x21
 8003aee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003af2:	f7fe f911 	bl	8001d18 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b04:	e042      	b.n	8003b8c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1c:	d122      	bne.n	8003b64 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f850 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e046      	b.n	8003bc6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b4a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	3302      	adds	r3, #2
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	e017      	b.n	8003b8c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	e013      	b.n	8003b8c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f82d 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e023      	b.n	8003bc6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	60ba      	str	r2, [r7, #8]
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1b7      	bne.n	8003b06 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2140      	movs	r1, #64	; 0x40
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f814 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e00a      	b.n	8003bc6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	e02c      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be6:	d028      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8003bee:	f7fe f893 	bl	8001d18 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d21d      	bcs.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0c3      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c9e:	f023 030c 	bic.w	r3, r3, #12
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a52      	ldr	r2, [pc, #328]	; (8003e10 <UART_SetConfig+0x1ac>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d14e      	bne.n	8003d6a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7ff fe06 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8003cd0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	0119      	lsls	r1, r3, #4
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009a      	lsls	r2, r3, #2
 8003cfc:	441a      	add	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d08:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2064      	movs	r0, #100	; 0x64
 8003d12:	fb00 f303 	mul.w	r3, r0, r3
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	3332      	adds	r3, #50	; 0x32
 8003d1c:	4a3d      	ldr	r2, [pc, #244]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d28:	4419      	add	r1, r3
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009a      	lsls	r2, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003d42:	fba3 0302 	umull	r0, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2064      	movs	r0, #100	; 0x64
 8003d4a:	fb00 f303 	mul.w	r3, r0, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	3332      	adds	r3, #50	; 0x32
 8003d54:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	f003 020f 	and.w	r2, r3, #15
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	440a      	add	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003d68:	e04d      	b.n	8003e06 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d6a:	f7ff fda3 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8003d6e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009a      	lsls	r2, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	4a23      	ldr	r2, [pc, #140]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	0119      	lsls	r1, r3, #4
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009a      	lsls	r2, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003da8:	fba3 0302 	umull	r0, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2064      	movs	r0, #100	; 0x64
 8003db0:	fb00 f303 	mul.w	r3, r0, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc6:	4419      	add	r1, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003de0:	fba3 0302 	umull	r0, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2064      	movs	r0, #100	; 0x64
 8003de8:	fb00 f303 	mul.w	r3, r0, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	3332      	adds	r3, #50	; 0x32
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <UART_SetConfig+0x1b0>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	440a      	add	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]
}
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40013800 	.word	0x40013800
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2000009c 	.word	0x2000009c

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	2500      	movs	r5, #0
 8003e28:	4e0c      	ldr	r6, [pc, #48]	; (8003e5c <__libc_init_array+0x38>)
 8003e2a:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2c:	1ba4      	subs	r4, r4, r6
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	42a5      	cmp	r5, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	f000 ffa4 	bl	8004d80 <_init>
 8003e38:	2500      	movs	r5, #0
 8003e3a:	4e0a      	ldr	r6, [pc, #40]	; (8003e64 <__libc_init_array+0x40>)
 8003e3c:	4c0a      	ldr	r4, [pc, #40]	; (8003e68 <__libc_init_array+0x44>)
 8003e3e:	1ba4      	subs	r4, r4, r6
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	42a5      	cmp	r5, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e4c:	4798      	blx	r3
 8003e4e:	3501      	adds	r5, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e56:	4798      	blx	r3
 8003e58:	3501      	adds	r5, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	08004e58 	.word	0x08004e58
 8003e60:	08004e58 	.word	0x08004e58
 8003e64:	08004e58 	.word	0x08004e58
 8003e68:	08004e5c 	.word	0x08004e5c

08003e6c <memset>:
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4402      	add	r2, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <siprintf>:
 8003e7c:	b40e      	push	{r1, r2, r3}
 8003e7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e82:	b500      	push	{lr}
 8003e84:	b09c      	sub	sp, #112	; 0x70
 8003e86:	ab1d      	add	r3, sp, #116	; 0x74
 8003e88:	9002      	str	r0, [sp, #8]
 8003e8a:	9006      	str	r0, [sp, #24]
 8003e8c:	9107      	str	r1, [sp, #28]
 8003e8e:	9104      	str	r1, [sp, #16]
 8003e90:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <siprintf+0x38>)
 8003e92:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <siprintf+0x3c>)
 8003e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	a902      	add	r1, sp, #8
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	f000 f866 	bl	8003f70 <_svfiprintf_r>
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	9b02      	ldr	r3, [sp, #8]
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	b01c      	add	sp, #112	; 0x70
 8003eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb0:	b003      	add	sp, #12
 8003eb2:	4770      	bx	lr
 8003eb4:	2000009c 	.word	0x2000009c
 8003eb8:	ffff0208 	.word	0xffff0208

08003ebc <__ssputs_r>:
 8003ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	688e      	ldr	r6, [r1, #8]
 8003ec2:	4682      	mov	sl, r0
 8003ec4:	429e      	cmp	r6, r3
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4690      	mov	r8, r2
 8003eca:	4699      	mov	r9, r3
 8003ecc:	d837      	bhi.n	8003f3e <__ssputs_r+0x82>
 8003ece:	898a      	ldrh	r2, [r1, #12]
 8003ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ed4:	d031      	beq.n	8003f3a <__ssputs_r+0x7e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	6825      	ldr	r5, [r4, #0]
 8003eda:	6909      	ldr	r1, [r1, #16]
 8003edc:	1a6f      	subs	r7, r5, r1
 8003ede:	6965      	ldr	r5, [r4, #20]
 8003ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ee4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ee8:	f109 0301 	add.w	r3, r9, #1
 8003eec:	443b      	add	r3, r7
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	bf38      	it	cc
 8003ef2:	461d      	movcc	r5, r3
 8003ef4:	0553      	lsls	r3, r2, #21
 8003ef6:	d530      	bpl.n	8003f5a <__ssputs_r+0x9e>
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f000 fb37 	bl	800456c <_malloc_r>
 8003efe:	4606      	mov	r6, r0
 8003f00:	b950      	cbnz	r0, 8003f18 <__ssputs_r+0x5c>
 8003f02:	230c      	movs	r3, #12
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f08:	f8ca 3000 	str.w	r3, [sl]
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	463a      	mov	r2, r7
 8003f1a:	6921      	ldr	r1, [r4, #16]
 8003f1c:	f000 fab6 	bl	800448c <memcpy>
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	6126      	str	r6, [r4, #16]
 8003f2e:	443e      	add	r6, r7
 8003f30:	6026      	str	r6, [r4, #0]
 8003f32:	464e      	mov	r6, r9
 8003f34:	6165      	str	r5, [r4, #20]
 8003f36:	1bed      	subs	r5, r5, r7
 8003f38:	60a5      	str	r5, [r4, #8]
 8003f3a:	454e      	cmp	r6, r9
 8003f3c:	d900      	bls.n	8003f40 <__ssputs_r+0x84>
 8003f3e:	464e      	mov	r6, r9
 8003f40:	4632      	mov	r2, r6
 8003f42:	4641      	mov	r1, r8
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	f000 faac 	bl	80044a2 <memmove>
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	1b9b      	subs	r3, r3, r6
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	441e      	add	r6, r3
 8003f56:	6026      	str	r6, [r4, #0]
 8003f58:	e7dc      	b.n	8003f14 <__ssputs_r+0x58>
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	f000 fb60 	bl	8004620 <_realloc_r>
 8003f60:	4606      	mov	r6, r0
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d1e2      	bne.n	8003f2c <__ssputs_r+0x70>
 8003f66:	6921      	ldr	r1, [r4, #16]
 8003f68:	4650      	mov	r0, sl
 8003f6a:	f000 fab3 	bl	80044d4 <_free_r>
 8003f6e:	e7c8      	b.n	8003f02 <__ssputs_r+0x46>

08003f70 <_svfiprintf_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	461d      	mov	r5, r3
 8003f76:	898b      	ldrh	r3, [r1, #12]
 8003f78:	b09d      	sub	sp, #116	; 0x74
 8003f7a:	061f      	lsls	r7, r3, #24
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	4616      	mov	r6, r2
 8003f82:	d50f      	bpl.n	8003fa4 <_svfiprintf_r+0x34>
 8003f84:	690b      	ldr	r3, [r1, #16]
 8003f86:	b96b      	cbnz	r3, 8003fa4 <_svfiprintf_r+0x34>
 8003f88:	2140      	movs	r1, #64	; 0x40
 8003f8a:	f000 faef 	bl	800456c <_malloc_r>
 8003f8e:	6020      	str	r0, [r4, #0]
 8003f90:	6120      	str	r0, [r4, #16]
 8003f92:	b928      	cbnz	r0, 8003fa0 <_svfiprintf_r+0x30>
 8003f94:	230c      	movs	r3, #12
 8003f96:	f8c8 3000 	str.w	r3, [r8]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9e:	e0c8      	b.n	8004132 <_svfiprintf_r+0x1c2>
 8003fa0:	2340      	movs	r3, #64	; 0x40
 8003fa2:	6163      	str	r3, [r4, #20]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa8:	2320      	movs	r3, #32
 8003faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fae:	2330      	movs	r3, #48	; 0x30
 8003fb0:	f04f 0b01 	mov.w	fp, #1
 8003fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fb8:	9503      	str	r5, [sp, #12]
 8003fba:	4637      	mov	r7, r6
 8003fbc:	463d      	mov	r5, r7
 8003fbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fc2:	b10b      	cbz	r3, 8003fc8 <_svfiprintf_r+0x58>
 8003fc4:	2b25      	cmp	r3, #37	; 0x25
 8003fc6:	d13e      	bne.n	8004046 <_svfiprintf_r+0xd6>
 8003fc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003fcc:	d00b      	beq.n	8003fe6 <_svfiprintf_r+0x76>
 8003fce:	4653      	mov	r3, sl
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	f7ff ff71 	bl	8003ebc <__ssputs_r>
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f000 80a4 	beq.w	8004128 <_svfiprintf_r+0x1b8>
 8003fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe2:	4453      	add	r3, sl
 8003fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe6:	783b      	ldrb	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 809d 	beq.w	8004128 <_svfiprintf_r+0x1b8>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ff8:	9304      	str	r3, [sp, #16]
 8003ffa:	9307      	str	r3, [sp, #28]
 8003ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004000:	931a      	str	r3, [sp, #104]	; 0x68
 8004002:	462f      	mov	r7, r5
 8004004:	2205      	movs	r2, #5
 8004006:	f817 1b01 	ldrb.w	r1, [r7], #1
 800400a:	4850      	ldr	r0, [pc, #320]	; (800414c <_svfiprintf_r+0x1dc>)
 800400c:	f000 fa30 	bl	8004470 <memchr>
 8004010:	9b04      	ldr	r3, [sp, #16]
 8004012:	b9d0      	cbnz	r0, 800404a <_svfiprintf_r+0xda>
 8004014:	06d9      	lsls	r1, r3, #27
 8004016:	bf44      	itt	mi
 8004018:	2220      	movmi	r2, #32
 800401a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800401e:	071a      	lsls	r2, r3, #28
 8004020:	bf44      	itt	mi
 8004022:	222b      	movmi	r2, #43	; 0x2b
 8004024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004028:	782a      	ldrb	r2, [r5, #0]
 800402a:	2a2a      	cmp	r2, #42	; 0x2a
 800402c:	d015      	beq.n	800405a <_svfiprintf_r+0xea>
 800402e:	462f      	mov	r7, r5
 8004030:	2000      	movs	r0, #0
 8004032:	250a      	movs	r5, #10
 8004034:	9a07      	ldr	r2, [sp, #28]
 8004036:	4639      	mov	r1, r7
 8004038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800403c:	3b30      	subs	r3, #48	; 0x30
 800403e:	2b09      	cmp	r3, #9
 8004040:	d94d      	bls.n	80040de <_svfiprintf_r+0x16e>
 8004042:	b1b8      	cbz	r0, 8004074 <_svfiprintf_r+0x104>
 8004044:	e00f      	b.n	8004066 <_svfiprintf_r+0xf6>
 8004046:	462f      	mov	r7, r5
 8004048:	e7b8      	b.n	8003fbc <_svfiprintf_r+0x4c>
 800404a:	4a40      	ldr	r2, [pc, #256]	; (800414c <_svfiprintf_r+0x1dc>)
 800404c:	463d      	mov	r5, r7
 800404e:	1a80      	subs	r0, r0, r2
 8004050:	fa0b f000 	lsl.w	r0, fp, r0
 8004054:	4318      	orrs	r0, r3
 8004056:	9004      	str	r0, [sp, #16]
 8004058:	e7d3      	b.n	8004002 <_svfiprintf_r+0x92>
 800405a:	9a03      	ldr	r2, [sp, #12]
 800405c:	1d11      	adds	r1, r2, #4
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	9103      	str	r1, [sp, #12]
 8004062:	2a00      	cmp	r2, #0
 8004064:	db01      	blt.n	800406a <_svfiprintf_r+0xfa>
 8004066:	9207      	str	r2, [sp, #28]
 8004068:	e004      	b.n	8004074 <_svfiprintf_r+0x104>
 800406a:	4252      	negs	r2, r2
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	9207      	str	r2, [sp, #28]
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	783b      	ldrb	r3, [r7, #0]
 8004076:	2b2e      	cmp	r3, #46	; 0x2e
 8004078:	d10c      	bne.n	8004094 <_svfiprintf_r+0x124>
 800407a:	787b      	ldrb	r3, [r7, #1]
 800407c:	2b2a      	cmp	r3, #42	; 0x2a
 800407e:	d133      	bne.n	80040e8 <_svfiprintf_r+0x178>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	3702      	adds	r7, #2
 8004084:	1d1a      	adds	r2, r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	9203      	str	r2, [sp, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfb8      	it	lt
 800408e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004092:	9305      	str	r3, [sp, #20]
 8004094:	4d2e      	ldr	r5, [pc, #184]	; (8004150 <_svfiprintf_r+0x1e0>)
 8004096:	2203      	movs	r2, #3
 8004098:	7839      	ldrb	r1, [r7, #0]
 800409a:	4628      	mov	r0, r5
 800409c:	f000 f9e8 	bl	8004470 <memchr>
 80040a0:	b138      	cbz	r0, 80040b2 <_svfiprintf_r+0x142>
 80040a2:	2340      	movs	r3, #64	; 0x40
 80040a4:	1b40      	subs	r0, r0, r5
 80040a6:	fa03 f000 	lsl.w	r0, r3, r0
 80040aa:	9b04      	ldr	r3, [sp, #16]
 80040ac:	3701      	adds	r7, #1
 80040ae:	4303      	orrs	r3, r0
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	7839      	ldrb	r1, [r7, #0]
 80040b4:	2206      	movs	r2, #6
 80040b6:	4827      	ldr	r0, [pc, #156]	; (8004154 <_svfiprintf_r+0x1e4>)
 80040b8:	1c7e      	adds	r6, r7, #1
 80040ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040be:	f000 f9d7 	bl	8004470 <memchr>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d038      	beq.n	8004138 <_svfiprintf_r+0x1c8>
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <_svfiprintf_r+0x1e8>)
 80040c8:	bb13      	cbnz	r3, 8004110 <_svfiprintf_r+0x1a0>
 80040ca:	9b03      	ldr	r3, [sp, #12]
 80040cc:	3307      	adds	r3, #7
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	3308      	adds	r3, #8
 80040d4:	9303      	str	r3, [sp, #12]
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	444b      	add	r3, r9
 80040da:	9309      	str	r3, [sp, #36]	; 0x24
 80040dc:	e76d      	b.n	8003fba <_svfiprintf_r+0x4a>
 80040de:	fb05 3202 	mla	r2, r5, r2, r3
 80040e2:	2001      	movs	r0, #1
 80040e4:	460f      	mov	r7, r1
 80040e6:	e7a6      	b.n	8004036 <_svfiprintf_r+0xc6>
 80040e8:	2300      	movs	r3, #0
 80040ea:	250a      	movs	r5, #10
 80040ec:	4619      	mov	r1, r3
 80040ee:	3701      	adds	r7, #1
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	4638      	mov	r0, r7
 80040f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f8:	3a30      	subs	r2, #48	; 0x30
 80040fa:	2a09      	cmp	r2, #9
 80040fc:	d903      	bls.n	8004106 <_svfiprintf_r+0x196>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0c8      	beq.n	8004094 <_svfiprintf_r+0x124>
 8004102:	9105      	str	r1, [sp, #20]
 8004104:	e7c6      	b.n	8004094 <_svfiprintf_r+0x124>
 8004106:	fb05 2101 	mla	r1, r5, r1, r2
 800410a:	2301      	movs	r3, #1
 800410c:	4607      	mov	r7, r0
 800410e:	e7f0      	b.n	80040f2 <_svfiprintf_r+0x182>
 8004110:	ab03      	add	r3, sp, #12
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4622      	mov	r2, r4
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <_svfiprintf_r+0x1ec>)
 8004118:	a904      	add	r1, sp, #16
 800411a:	4640      	mov	r0, r8
 800411c:	f3af 8000 	nop.w
 8004120:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004124:	4681      	mov	r9, r0
 8004126:	d1d6      	bne.n	80040d6 <_svfiprintf_r+0x166>
 8004128:	89a3      	ldrh	r3, [r4, #12]
 800412a:	065b      	lsls	r3, r3, #25
 800412c:	f53f af35 	bmi.w	8003f9a <_svfiprintf_r+0x2a>
 8004130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004132:	b01d      	add	sp, #116	; 0x74
 8004134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004138:	ab03      	add	r3, sp, #12
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	4622      	mov	r2, r4
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <_svfiprintf_r+0x1ec>)
 8004140:	a904      	add	r1, sp, #16
 8004142:	4640      	mov	r0, r8
 8004144:	f000 f882 	bl	800424c <_printf_i>
 8004148:	e7ea      	b.n	8004120 <_svfiprintf_r+0x1b0>
 800414a:	bf00      	nop
 800414c:	08004dd8 	.word	0x08004dd8
 8004150:	08004dde 	.word	0x08004dde
 8004154:	08004de2 	.word	0x08004de2
 8004158:	00000000 	.word	0x00000000
 800415c:	08003ebd 	.word	0x08003ebd

08004160 <_printf_common>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	4691      	mov	r9, r2
 8004166:	461f      	mov	r7, r3
 8004168:	688a      	ldr	r2, [r1, #8]
 800416a:	690b      	ldr	r3, [r1, #16]
 800416c:	4606      	mov	r6, r0
 800416e:	4293      	cmp	r3, r2
 8004170:	bfb8      	it	lt
 8004172:	4613      	movlt	r3, r2
 8004174:	f8c9 3000 	str.w	r3, [r9]
 8004178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800417c:	460c      	mov	r4, r1
 800417e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004182:	b112      	cbz	r2, 800418a <_printf_common+0x2a>
 8004184:	3301      	adds	r3, #1
 8004186:	f8c9 3000 	str.w	r3, [r9]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	0699      	lsls	r1, r3, #26
 800418e:	bf42      	ittt	mi
 8004190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004194:	3302      	addmi	r3, #2
 8004196:	f8c9 3000 	strmi.w	r3, [r9]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	f015 0506 	ands.w	r5, r5, #6
 80041a0:	d107      	bne.n	80041b2 <_printf_common+0x52>
 80041a2:	f104 0a19 	add.w	sl, r4, #25
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	f8d9 2000 	ldr.w	r2, [r9]
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	42ab      	cmp	r3, r5
 80041b0:	dc29      	bgt.n	8004206 <_printf_common+0xa6>
 80041b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	3300      	adds	r3, #0
 80041ba:	bf18      	it	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	0692      	lsls	r2, r2, #26
 80041c0:	d42e      	bmi.n	8004220 <_printf_common+0xc0>
 80041c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c6:	4639      	mov	r1, r7
 80041c8:	4630      	mov	r0, r6
 80041ca:	47c0      	blx	r8
 80041cc:	3001      	adds	r0, #1
 80041ce:	d021      	beq.n	8004214 <_printf_common+0xb4>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	68e5      	ldr	r5, [r4, #12]
 80041d4:	f003 0306 	and.w	r3, r3, #6
 80041d8:	2b04      	cmp	r3, #4
 80041da:	bf18      	it	ne
 80041dc:	2500      	movne	r5, #0
 80041de:	f8d9 2000 	ldr.w	r2, [r9]
 80041e2:	f04f 0900 	mov.w	r9, #0
 80041e6:	bf08      	it	eq
 80041e8:	1aad      	subeq	r5, r5, r2
 80041ea:	68a3      	ldr	r3, [r4, #8]
 80041ec:	6922      	ldr	r2, [r4, #16]
 80041ee:	bf08      	it	eq
 80041f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bfc4      	itt	gt
 80041f8:	1a9b      	subgt	r3, r3, r2
 80041fa:	18ed      	addgt	r5, r5, r3
 80041fc:	341a      	adds	r4, #26
 80041fe:	454d      	cmp	r5, r9
 8004200:	d11a      	bne.n	8004238 <_printf_common+0xd8>
 8004202:	2000      	movs	r0, #0
 8004204:	e008      	b.n	8004218 <_printf_common+0xb8>
 8004206:	2301      	movs	r3, #1
 8004208:	4652      	mov	r2, sl
 800420a:	4639      	mov	r1, r7
 800420c:	4630      	mov	r0, r6
 800420e:	47c0      	blx	r8
 8004210:	3001      	adds	r0, #1
 8004212:	d103      	bne.n	800421c <_printf_common+0xbc>
 8004214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421c:	3501      	adds	r5, #1
 800421e:	e7c2      	b.n	80041a6 <_printf_common+0x46>
 8004220:	2030      	movs	r0, #48	; 0x30
 8004222:	18e1      	adds	r1, r4, r3
 8004224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800422e:	4422      	add	r2, r4
 8004230:	3302      	adds	r3, #2
 8004232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004236:	e7c4      	b.n	80041c2 <_printf_common+0x62>
 8004238:	2301      	movs	r3, #1
 800423a:	4622      	mov	r2, r4
 800423c:	4639      	mov	r1, r7
 800423e:	4630      	mov	r0, r6
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d0e6      	beq.n	8004214 <_printf_common+0xb4>
 8004246:	f109 0901 	add.w	r9, r9, #1
 800424a:	e7d8      	b.n	80041fe <_printf_common+0x9e>

0800424c <_printf_i>:
 800424c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004254:	460c      	mov	r4, r1
 8004256:	7e09      	ldrb	r1, [r1, #24]
 8004258:	b085      	sub	sp, #20
 800425a:	296e      	cmp	r1, #110	; 0x6e
 800425c:	4617      	mov	r7, r2
 800425e:	4606      	mov	r6, r0
 8004260:	4698      	mov	r8, r3
 8004262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004264:	f000 80b3 	beq.w	80043ce <_printf_i+0x182>
 8004268:	d822      	bhi.n	80042b0 <_printf_i+0x64>
 800426a:	2963      	cmp	r1, #99	; 0x63
 800426c:	d036      	beq.n	80042dc <_printf_i+0x90>
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x3a>
 8004270:	2900      	cmp	r1, #0
 8004272:	f000 80b9 	beq.w	80043e8 <_printf_i+0x19c>
 8004276:	2958      	cmp	r1, #88	; 0x58
 8004278:	f000 8083 	beq.w	8004382 <_printf_i+0x136>
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004284:	e032      	b.n	80042ec <_printf_i+0xa0>
 8004286:	2964      	cmp	r1, #100	; 0x64
 8004288:	d001      	beq.n	800428e <_printf_i+0x42>
 800428a:	2969      	cmp	r1, #105	; 0x69
 800428c:	d1f6      	bne.n	800427c <_printf_i+0x30>
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	0605      	lsls	r5, r0, #24
 8004294:	f103 0104 	add.w	r1, r3, #4
 8004298:	d52a      	bpl.n	80042f0 <_printf_i+0xa4>
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da03      	bge.n	80042aa <_printf_i+0x5e>
 80042a2:	222d      	movs	r2, #45	; 0x2d
 80042a4:	425b      	negs	r3, r3
 80042a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042aa:	486f      	ldr	r0, [pc, #444]	; (8004468 <_printf_i+0x21c>)
 80042ac:	220a      	movs	r2, #10
 80042ae:	e039      	b.n	8004324 <_printf_i+0xd8>
 80042b0:	2973      	cmp	r1, #115	; 0x73
 80042b2:	f000 809d 	beq.w	80043f0 <_printf_i+0x1a4>
 80042b6:	d808      	bhi.n	80042ca <_printf_i+0x7e>
 80042b8:	296f      	cmp	r1, #111	; 0x6f
 80042ba:	d020      	beq.n	80042fe <_printf_i+0xb2>
 80042bc:	2970      	cmp	r1, #112	; 0x70
 80042be:	d1dd      	bne.n	800427c <_printf_i+0x30>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	f043 0320 	orr.w	r3, r3, #32
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	e003      	b.n	80042d2 <_printf_i+0x86>
 80042ca:	2975      	cmp	r1, #117	; 0x75
 80042cc:	d017      	beq.n	80042fe <_printf_i+0xb2>
 80042ce:	2978      	cmp	r1, #120	; 0x78
 80042d0:	d1d4      	bne.n	800427c <_printf_i+0x30>
 80042d2:	2378      	movs	r3, #120	; 0x78
 80042d4:	4865      	ldr	r0, [pc, #404]	; (800446c <_printf_i+0x220>)
 80042d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042da:	e055      	b.n	8004388 <_printf_i+0x13c>
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e2:	1d19      	adds	r1, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6011      	str	r1, [r2, #0]
 80042e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ec:	2301      	movs	r3, #1
 80042ee:	e08c      	b.n	800440a <_printf_i+0x1be>
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042f6:	6011      	str	r1, [r2, #0]
 80042f8:	bf18      	it	ne
 80042fa:	b21b      	sxthne	r3, r3
 80042fc:	e7cf      	b.n	800429e <_printf_i+0x52>
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	1d18      	adds	r0, r3, #4
 8004304:	6010      	str	r0, [r2, #0]
 8004306:	0628      	lsls	r0, r5, #24
 8004308:	d501      	bpl.n	800430e <_printf_i+0xc2>
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0xc8>
 800430e:	0668      	lsls	r0, r5, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0xbe>
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	296f      	cmp	r1, #111	; 0x6f
 8004316:	bf14      	ite	ne
 8004318:	220a      	movne	r2, #10
 800431a:	2208      	moveq	r2, #8
 800431c:	4852      	ldr	r0, [pc, #328]	; (8004468 <_printf_i+0x21c>)
 800431e:	2100      	movs	r1, #0
 8004320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004324:	6865      	ldr	r5, [r4, #4]
 8004326:	2d00      	cmp	r5, #0
 8004328:	60a5      	str	r5, [r4, #8]
 800432a:	f2c0 8095 	blt.w	8004458 <_printf_i+0x20c>
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	f021 0104 	bic.w	r1, r1, #4
 8004334:	6021      	str	r1, [r4, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d13d      	bne.n	80043b6 <_printf_i+0x16a>
 800433a:	2d00      	cmp	r5, #0
 800433c:	f040 808e 	bne.w	800445c <_printf_i+0x210>
 8004340:	4665      	mov	r5, ip
 8004342:	2a08      	cmp	r2, #8
 8004344:	d10b      	bne.n	800435e <_printf_i+0x112>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07db      	lsls	r3, r3, #31
 800434a:	d508      	bpl.n	800435e <_printf_i+0x112>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	bfde      	ittt	le
 8004354:	2330      	movle	r3, #48	; 0x30
 8004356:	f805 3c01 	strble.w	r3, [r5, #-1]
 800435a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800435e:	ebac 0305 	sub.w	r3, ip, r5
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	f8cd 8000 	str.w	r8, [sp]
 8004368:	463b      	mov	r3, r7
 800436a:	aa03      	add	r2, sp, #12
 800436c:	4621      	mov	r1, r4
 800436e:	4630      	mov	r0, r6
 8004370:	f7ff fef6 	bl	8004160 <_printf_common>
 8004374:	3001      	adds	r0, #1
 8004376:	d14d      	bne.n	8004414 <_printf_i+0x1c8>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800437c:	b005      	add	sp, #20
 800437e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004382:	4839      	ldr	r0, [pc, #228]	; (8004468 <_printf_i+0x21c>)
 8004384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004388:	6813      	ldr	r3, [r2, #0]
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	1d1d      	adds	r5, r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6015      	str	r5, [r2, #0]
 8004392:	060a      	lsls	r2, r1, #24
 8004394:	d50b      	bpl.n	80043ae <_printf_i+0x162>
 8004396:	07ca      	lsls	r2, r1, #31
 8004398:	bf44      	itt	mi
 800439a:	f041 0120 	orrmi.w	r1, r1, #32
 800439e:	6021      	strmi	r1, [r4, #0]
 80043a0:	b91b      	cbnz	r3, 80043aa <_printf_i+0x15e>
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	2210      	movs	r2, #16
 80043ac:	e7b7      	b.n	800431e <_printf_i+0xd2>
 80043ae:	064d      	lsls	r5, r1, #25
 80043b0:	bf48      	it	mi
 80043b2:	b29b      	uxthmi	r3, r3
 80043b4:	e7ef      	b.n	8004396 <_printf_i+0x14a>
 80043b6:	4665      	mov	r5, ip
 80043b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80043bc:	fb02 3311 	mls	r3, r2, r1, r3
 80043c0:	5cc3      	ldrb	r3, [r0, r3]
 80043c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043c6:	460b      	mov	r3, r1
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d1f5      	bne.n	80043b8 <_printf_i+0x16c>
 80043cc:	e7b9      	b.n	8004342 <_printf_i+0xf6>
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	1d18      	adds	r0, r3, #4
 80043d4:	6961      	ldr	r1, [r4, #20]
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	0628      	lsls	r0, r5, #24
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	d501      	bpl.n	80043e2 <_printf_i+0x196>
 80043de:	6019      	str	r1, [r3, #0]
 80043e0:	e002      	b.n	80043e8 <_printf_i+0x19c>
 80043e2:	066a      	lsls	r2, r5, #25
 80043e4:	d5fb      	bpl.n	80043de <_printf_i+0x192>
 80043e6:	8019      	strh	r1, [r3, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	4665      	mov	r5, ip
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	e7b9      	b.n	8004364 <_printf_i+0x118>
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	1d19      	adds	r1, r3, #4
 80043f4:	6011      	str	r1, [r2, #0]
 80043f6:	681d      	ldr	r5, [r3, #0]
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	2100      	movs	r1, #0
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f837 	bl	8004470 <memchr>
 8004402:	b108      	cbz	r0, 8004408 <_printf_i+0x1bc>
 8004404:	1b40      	subs	r0, r0, r5
 8004406:	6060      	str	r0, [r4, #4]
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	2300      	movs	r3, #0
 800440e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004412:	e7a7      	b.n	8004364 <_printf_i+0x118>
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	462a      	mov	r2, r5
 8004418:	4639      	mov	r1, r7
 800441a:	4630      	mov	r0, r6
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d0aa      	beq.n	8004378 <_printf_i+0x12c>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	079b      	lsls	r3, r3, #30
 8004426:	d413      	bmi.n	8004450 <_printf_i+0x204>
 8004428:	68e0      	ldr	r0, [r4, #12]
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	4298      	cmp	r0, r3
 800442e:	bfb8      	it	lt
 8004430:	4618      	movlt	r0, r3
 8004432:	e7a3      	b.n	800437c <_printf_i+0x130>
 8004434:	2301      	movs	r3, #1
 8004436:	464a      	mov	r2, r9
 8004438:	4639      	mov	r1, r7
 800443a:	4630      	mov	r0, r6
 800443c:	47c0      	blx	r8
 800443e:	3001      	adds	r0, #1
 8004440:	d09a      	beq.n	8004378 <_printf_i+0x12c>
 8004442:	3501      	adds	r5, #1
 8004444:	68e3      	ldr	r3, [r4, #12]
 8004446:	9a03      	ldr	r2, [sp, #12]
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	42ab      	cmp	r3, r5
 800444c:	dcf2      	bgt.n	8004434 <_printf_i+0x1e8>
 800444e:	e7eb      	b.n	8004428 <_printf_i+0x1dc>
 8004450:	2500      	movs	r5, #0
 8004452:	f104 0919 	add.w	r9, r4, #25
 8004456:	e7f5      	b.n	8004444 <_printf_i+0x1f8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ac      	bne.n	80043b6 <_printf_i+0x16a>
 800445c:	7803      	ldrb	r3, [r0, #0]
 800445e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004466:	e76c      	b.n	8004342 <_printf_i+0xf6>
 8004468:	08004de9 	.word	0x08004de9
 800446c:	08004dfa 	.word	0x08004dfa

08004470 <memchr>:
 8004470:	b510      	push	{r4, lr}
 8004472:	b2c9      	uxtb	r1, r1
 8004474:	4402      	add	r2, r0
 8004476:	4290      	cmp	r0, r2
 8004478:	4603      	mov	r3, r0
 800447a:	d101      	bne.n	8004480 <memchr+0x10>
 800447c:	2300      	movs	r3, #0
 800447e:	e003      	b.n	8004488 <memchr+0x18>
 8004480:	781c      	ldrb	r4, [r3, #0]
 8004482:	3001      	adds	r0, #1
 8004484:	428c      	cmp	r4, r1
 8004486:	d1f6      	bne.n	8004476 <memchr+0x6>
 8004488:	4618      	mov	r0, r3
 800448a:	bd10      	pop	{r4, pc}

0800448c <memcpy>:
 800448c:	b510      	push	{r4, lr}
 800448e:	1e43      	subs	r3, r0, #1
 8004490:	440a      	add	r2, r1
 8004492:	4291      	cmp	r1, r2
 8004494:	d100      	bne.n	8004498 <memcpy+0xc>
 8004496:	bd10      	pop	{r4, pc}
 8004498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800449c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044a0:	e7f7      	b.n	8004492 <memcpy+0x6>

080044a2 <memmove>:
 80044a2:	4288      	cmp	r0, r1
 80044a4:	b510      	push	{r4, lr}
 80044a6:	eb01 0302 	add.w	r3, r1, r2
 80044aa:	d807      	bhi.n	80044bc <memmove+0x1a>
 80044ac:	1e42      	subs	r2, r0, #1
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d00a      	beq.n	80044c8 <memmove+0x26>
 80044b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044ba:	e7f8      	b.n	80044ae <memmove+0xc>
 80044bc:	4283      	cmp	r3, r0
 80044be:	d9f5      	bls.n	80044ac <memmove+0xa>
 80044c0:	1881      	adds	r1, r0, r2
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	42d3      	cmn	r3, r2
 80044c6:	d100      	bne.n	80044ca <memmove+0x28>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044d2:	e7f7      	b.n	80044c4 <memmove+0x22>

080044d4 <_free_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	2900      	cmp	r1, #0
 80044da:	d043      	beq.n	8004564 <_free_r+0x90>
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f0c      	subs	r4, r1, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfb8      	it	lt
 80044e6:	18e4      	addlt	r4, r4, r3
 80044e8:	f000 f8d0 	bl	800468c <__malloc_lock>
 80044ec:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <_free_r+0x94>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	4610      	mov	r0, r2
 80044f2:	b933      	cbnz	r3, 8004502 <_free_r+0x2e>
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	6014      	str	r4, [r2, #0]
 80044f8:	4628      	mov	r0, r5
 80044fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fe:	f000 b8c6 	b.w	800468e <__malloc_unlock>
 8004502:	42a3      	cmp	r3, r4
 8004504:	d90b      	bls.n	800451e <_free_r+0x4a>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	1862      	adds	r2, r4, r1
 800450a:	4293      	cmp	r3, r2
 800450c:	bf01      	itttt	eq
 800450e:	681a      	ldreq	r2, [r3, #0]
 8004510:	685b      	ldreq	r3, [r3, #4]
 8004512:	1852      	addeq	r2, r2, r1
 8004514:	6022      	streq	r2, [r4, #0]
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	6004      	str	r4, [r0, #0]
 800451a:	e7ed      	b.n	80044f8 <_free_r+0x24>
 800451c:	4613      	mov	r3, r2
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	b10a      	cbz	r2, 8004526 <_free_r+0x52>
 8004522:	42a2      	cmp	r2, r4
 8004524:	d9fa      	bls.n	800451c <_free_r+0x48>
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	1858      	adds	r0, r3, r1
 800452a:	42a0      	cmp	r0, r4
 800452c:	d10b      	bne.n	8004546 <_free_r+0x72>
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	4401      	add	r1, r0
 8004532:	1858      	adds	r0, r3, r1
 8004534:	4282      	cmp	r2, r0
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	d1de      	bne.n	80044f8 <_free_r+0x24>
 800453a:	6810      	ldr	r0, [r2, #0]
 800453c:	6852      	ldr	r2, [r2, #4]
 800453e:	4401      	add	r1, r0
 8004540:	6019      	str	r1, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	e7d8      	b.n	80044f8 <_free_r+0x24>
 8004546:	d902      	bls.n	800454e <_free_r+0x7a>
 8004548:	230c      	movs	r3, #12
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	e7d4      	b.n	80044f8 <_free_r+0x24>
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	1821      	adds	r1, r4, r0
 8004552:	428a      	cmp	r2, r1
 8004554:	bf01      	itttt	eq
 8004556:	6811      	ldreq	r1, [r2, #0]
 8004558:	6852      	ldreq	r2, [r2, #4]
 800455a:	1809      	addeq	r1, r1, r0
 800455c:	6021      	streq	r1, [r4, #0]
 800455e:	6062      	str	r2, [r4, #4]
 8004560:	605c      	str	r4, [r3, #4]
 8004562:	e7c9      	b.n	80044f8 <_free_r+0x24>
 8004564:	bd38      	pop	{r3, r4, r5, pc}
 8004566:	bf00      	nop
 8004568:	20000124 	.word	0x20000124

0800456c <_malloc_r>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	1ccd      	adds	r5, r1, #3
 8004570:	f025 0503 	bic.w	r5, r5, #3
 8004574:	3508      	adds	r5, #8
 8004576:	2d0c      	cmp	r5, #12
 8004578:	bf38      	it	cc
 800457a:	250c      	movcc	r5, #12
 800457c:	2d00      	cmp	r5, #0
 800457e:	4606      	mov	r6, r0
 8004580:	db01      	blt.n	8004586 <_malloc_r+0x1a>
 8004582:	42a9      	cmp	r1, r5
 8004584:	d903      	bls.n	800458e <_malloc_r+0x22>
 8004586:	230c      	movs	r3, #12
 8004588:	6033      	str	r3, [r6, #0]
 800458a:	2000      	movs	r0, #0
 800458c:	bd70      	pop	{r4, r5, r6, pc}
 800458e:	f000 f87d 	bl	800468c <__malloc_lock>
 8004592:	4a21      	ldr	r2, [pc, #132]	; (8004618 <_malloc_r+0xac>)
 8004594:	6814      	ldr	r4, [r2, #0]
 8004596:	4621      	mov	r1, r4
 8004598:	b991      	cbnz	r1, 80045c0 <_malloc_r+0x54>
 800459a:	4c20      	ldr	r4, [pc, #128]	; (800461c <_malloc_r+0xb0>)
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	b91b      	cbnz	r3, 80045a8 <_malloc_r+0x3c>
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 f863 	bl	800466c <_sbrk_r>
 80045a6:	6020      	str	r0, [r4, #0]
 80045a8:	4629      	mov	r1, r5
 80045aa:	4630      	mov	r0, r6
 80045ac:	f000 f85e 	bl	800466c <_sbrk_r>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d124      	bne.n	80045fe <_malloc_r+0x92>
 80045b4:	230c      	movs	r3, #12
 80045b6:	4630      	mov	r0, r6
 80045b8:	6033      	str	r3, [r6, #0]
 80045ba:	f000 f868 	bl	800468e <__malloc_unlock>
 80045be:	e7e4      	b.n	800458a <_malloc_r+0x1e>
 80045c0:	680b      	ldr	r3, [r1, #0]
 80045c2:	1b5b      	subs	r3, r3, r5
 80045c4:	d418      	bmi.n	80045f8 <_malloc_r+0x8c>
 80045c6:	2b0b      	cmp	r3, #11
 80045c8:	d90f      	bls.n	80045ea <_malloc_r+0x7e>
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	18cc      	adds	r4, r1, r3
 80045ce:	50cd      	str	r5, [r1, r3]
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 f85c 	bl	800468e <__malloc_unlock>
 80045d6:	f104 000b 	add.w	r0, r4, #11
 80045da:	1d23      	adds	r3, r4, #4
 80045dc:	f020 0007 	bic.w	r0, r0, #7
 80045e0:	1ac3      	subs	r3, r0, r3
 80045e2:	d0d3      	beq.n	800458c <_malloc_r+0x20>
 80045e4:	425a      	negs	r2, r3
 80045e6:	50e2      	str	r2, [r4, r3]
 80045e8:	e7d0      	b.n	800458c <_malloc_r+0x20>
 80045ea:	684b      	ldr	r3, [r1, #4]
 80045ec:	428c      	cmp	r4, r1
 80045ee:	bf16      	itet	ne
 80045f0:	6063      	strne	r3, [r4, #4]
 80045f2:	6013      	streq	r3, [r2, #0]
 80045f4:	460c      	movne	r4, r1
 80045f6:	e7eb      	b.n	80045d0 <_malloc_r+0x64>
 80045f8:	460c      	mov	r4, r1
 80045fa:	6849      	ldr	r1, [r1, #4]
 80045fc:	e7cc      	b.n	8004598 <_malloc_r+0x2c>
 80045fe:	1cc4      	adds	r4, r0, #3
 8004600:	f024 0403 	bic.w	r4, r4, #3
 8004604:	42a0      	cmp	r0, r4
 8004606:	d005      	beq.n	8004614 <_malloc_r+0xa8>
 8004608:	1a21      	subs	r1, r4, r0
 800460a:	4630      	mov	r0, r6
 800460c:	f000 f82e 	bl	800466c <_sbrk_r>
 8004610:	3001      	adds	r0, #1
 8004612:	d0cf      	beq.n	80045b4 <_malloc_r+0x48>
 8004614:	6025      	str	r5, [r4, #0]
 8004616:	e7db      	b.n	80045d0 <_malloc_r+0x64>
 8004618:	20000124 	.word	0x20000124
 800461c:	20000128 	.word	0x20000128

08004620 <_realloc_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	4607      	mov	r7, r0
 8004624:	4614      	mov	r4, r2
 8004626:	460e      	mov	r6, r1
 8004628:	b921      	cbnz	r1, 8004634 <_realloc_r+0x14>
 800462a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800462e:	4611      	mov	r1, r2
 8004630:	f7ff bf9c 	b.w	800456c <_malloc_r>
 8004634:	b922      	cbnz	r2, 8004640 <_realloc_r+0x20>
 8004636:	f7ff ff4d 	bl	80044d4 <_free_r>
 800463a:	4625      	mov	r5, r4
 800463c:	4628      	mov	r0, r5
 800463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004640:	f000 f826 	bl	8004690 <_malloc_usable_size_r>
 8004644:	42a0      	cmp	r0, r4
 8004646:	d20f      	bcs.n	8004668 <_realloc_r+0x48>
 8004648:	4621      	mov	r1, r4
 800464a:	4638      	mov	r0, r7
 800464c:	f7ff ff8e 	bl	800456c <_malloc_r>
 8004650:	4605      	mov	r5, r0
 8004652:	2800      	cmp	r0, #0
 8004654:	d0f2      	beq.n	800463c <_realloc_r+0x1c>
 8004656:	4631      	mov	r1, r6
 8004658:	4622      	mov	r2, r4
 800465a:	f7ff ff17 	bl	800448c <memcpy>
 800465e:	4631      	mov	r1, r6
 8004660:	4638      	mov	r0, r7
 8004662:	f7ff ff37 	bl	80044d4 <_free_r>
 8004666:	e7e9      	b.n	800463c <_realloc_r+0x1c>
 8004668:	4635      	mov	r5, r6
 800466a:	e7e7      	b.n	800463c <_realloc_r+0x1c>

0800466c <_sbrk_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	2300      	movs	r3, #0
 8004670:	4c05      	ldr	r4, [pc, #20]	; (8004688 <_sbrk_r+0x1c>)
 8004672:	4605      	mov	r5, r0
 8004674:	4608      	mov	r0, r1
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	f7fd f9fa 	bl	8001a70 <_sbrk>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_sbrk_r+0x1a>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	b103      	cbz	r3, 8004686 <_sbrk_r+0x1a>
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	20000220 	.word	0x20000220

0800468c <__malloc_lock>:
 800468c:	4770      	bx	lr

0800468e <__malloc_unlock>:
 800468e:	4770      	bx	lr

08004690 <_malloc_usable_size_r>:
 8004690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004694:	1f18      	subs	r0, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfbc      	itt	lt
 800469a:	580b      	ldrlt	r3, [r1, r0]
 800469c:	18c0      	addlt	r0, r0, r3
 800469e:	4770      	bx	lr

080046a0 <atan>:
 80046a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	4bb6      	ldr	r3, [pc, #728]	; (8004980 <atan+0x2e0>)
 80046a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80046aa:	429e      	cmp	r6, r3
 80046ac:	4604      	mov	r4, r0
 80046ae:	460d      	mov	r5, r1
 80046b0:	468b      	mov	fp, r1
 80046b2:	dd17      	ble.n	80046e4 <atan+0x44>
 80046b4:	4bb3      	ldr	r3, [pc, #716]	; (8004984 <atan+0x2e4>)
 80046b6:	429e      	cmp	r6, r3
 80046b8:	dc01      	bgt.n	80046be <atan+0x1e>
 80046ba:	d109      	bne.n	80046d0 <atan+0x30>
 80046bc:	b140      	cbz	r0, 80046d0 <atan+0x30>
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	4620      	mov	r0, r4
 80046c4:	4629      	mov	r1, r5
 80046c6:	f7fb fd49 	bl	800015c <__adddf3>
 80046ca:	4604      	mov	r4, r0
 80046cc:	460d      	mov	r5, r1
 80046ce:	e005      	b.n	80046dc <atan+0x3c>
 80046d0:	f1bb 0f00 	cmp.w	fp, #0
 80046d4:	4cac      	ldr	r4, [pc, #688]	; (8004988 <atan+0x2e8>)
 80046d6:	f340 8121 	ble.w	800491c <atan+0x27c>
 80046da:	4dac      	ldr	r5, [pc, #688]	; (800498c <atan+0x2ec>)
 80046dc:	4620      	mov	r0, r4
 80046de:	4629      	mov	r1, r5
 80046e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	4baa      	ldr	r3, [pc, #680]	; (8004990 <atan+0x2f0>)
 80046e6:	429e      	cmp	r6, r3
 80046e8:	dc11      	bgt.n	800470e <atan+0x6e>
 80046ea:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80046ee:	429e      	cmp	r6, r3
 80046f0:	dc0a      	bgt.n	8004708 <atan+0x68>
 80046f2:	a38b      	add	r3, pc, #556	; (adr r3, 8004920 <atan+0x280>)
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f7fb fd30 	bl	800015c <__adddf3>
 80046fc:	2200      	movs	r2, #0
 80046fe:	4ba5      	ldr	r3, [pc, #660]	; (8004994 <atan+0x2f4>)
 8004700:	f7fc f972 	bl	80009e8 <__aeabi_dcmpgt>
 8004704:	2800      	cmp	r0, #0
 8004706:	d1e9      	bne.n	80046dc <atan+0x3c>
 8004708:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800470c:	e027      	b.n	800475e <atan+0xbe>
 800470e:	f000 f951 	bl	80049b4 <fabs>
 8004712:	4ba1      	ldr	r3, [pc, #644]	; (8004998 <atan+0x2f8>)
 8004714:	4604      	mov	r4, r0
 8004716:	429e      	cmp	r6, r3
 8004718:	460d      	mov	r5, r1
 800471a:	f300 80b8 	bgt.w	800488e <atan+0x1ee>
 800471e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004722:	429e      	cmp	r6, r3
 8004724:	f300 809c 	bgt.w	8004860 <atan+0x1c0>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	f7fb fd16 	bl	800015c <__adddf3>
 8004730:	2200      	movs	r2, #0
 8004732:	4b98      	ldr	r3, [pc, #608]	; (8004994 <atan+0x2f4>)
 8004734:	f7fb fd10 	bl	8000158 <__aeabi_dsub>
 8004738:	2200      	movs	r2, #0
 800473a:	4606      	mov	r6, r0
 800473c:	460f      	mov	r7, r1
 800473e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004742:	4620      	mov	r0, r4
 8004744:	4629      	mov	r1, r5
 8004746:	f7fb fd09 	bl	800015c <__adddf3>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4630      	mov	r0, r6
 8004750:	4639      	mov	r1, r7
 8004752:	f7fb ffe3 	bl	800071c <__aeabi_ddiv>
 8004756:	f04f 0a00 	mov.w	sl, #0
 800475a:	4604      	mov	r4, r0
 800475c:	460d      	mov	r5, r1
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	4620      	mov	r0, r4
 8004764:	4629      	mov	r1, r5
 8004766:	f7fb feaf 	bl	80004c8 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4680      	mov	r8, r0
 8004770:	4689      	mov	r9, r1
 8004772:	f7fb fea9 	bl	80004c8 <__aeabi_dmul>
 8004776:	a36c      	add	r3, pc, #432	; (adr r3, 8004928 <atan+0x288>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	4606      	mov	r6, r0
 800477e:	460f      	mov	r7, r1
 8004780:	f7fb fea2 	bl	80004c8 <__aeabi_dmul>
 8004784:	a36a      	add	r3, pc, #424	; (adr r3, 8004930 <atan+0x290>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fb fce7 	bl	800015c <__adddf3>
 800478e:	4632      	mov	r2, r6
 8004790:	463b      	mov	r3, r7
 8004792:	f7fb fe99 	bl	80004c8 <__aeabi_dmul>
 8004796:	a368      	add	r3, pc, #416	; (adr r3, 8004938 <atan+0x298>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f7fb fcde 	bl	800015c <__adddf3>
 80047a0:	4632      	mov	r2, r6
 80047a2:	463b      	mov	r3, r7
 80047a4:	f7fb fe90 	bl	80004c8 <__aeabi_dmul>
 80047a8:	a365      	add	r3, pc, #404	; (adr r3, 8004940 <atan+0x2a0>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb fcd5 	bl	800015c <__adddf3>
 80047b2:	4632      	mov	r2, r6
 80047b4:	463b      	mov	r3, r7
 80047b6:	f7fb fe87 	bl	80004c8 <__aeabi_dmul>
 80047ba:	a363      	add	r3, pc, #396	; (adr r3, 8004948 <atan+0x2a8>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fb fccc 	bl	800015c <__adddf3>
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	f7fb fe7e 	bl	80004c8 <__aeabi_dmul>
 80047cc:	a360      	add	r3, pc, #384	; (adr r3, 8004950 <atan+0x2b0>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fb fcc3 	bl	800015c <__adddf3>
 80047d6:	4642      	mov	r2, r8
 80047d8:	464b      	mov	r3, r9
 80047da:	f7fb fe75 	bl	80004c8 <__aeabi_dmul>
 80047de:	a35e      	add	r3, pc, #376	; (adr r3, 8004958 <atan+0x2b8>)
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	4680      	mov	r8, r0
 80047e6:	4689      	mov	r9, r1
 80047e8:	4630      	mov	r0, r6
 80047ea:	4639      	mov	r1, r7
 80047ec:	f7fb fe6c 	bl	80004c8 <__aeabi_dmul>
 80047f0:	a35b      	add	r3, pc, #364	; (adr r3, 8004960 <atan+0x2c0>)
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f7fb fcaf 	bl	8000158 <__aeabi_dsub>
 80047fa:	4632      	mov	r2, r6
 80047fc:	463b      	mov	r3, r7
 80047fe:	f7fb fe63 	bl	80004c8 <__aeabi_dmul>
 8004802:	a359      	add	r3, pc, #356	; (adr r3, 8004968 <atan+0x2c8>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fb fca6 	bl	8000158 <__aeabi_dsub>
 800480c:	4632      	mov	r2, r6
 800480e:	463b      	mov	r3, r7
 8004810:	f7fb fe5a 	bl	80004c8 <__aeabi_dmul>
 8004814:	a356      	add	r3, pc, #344	; (adr r3, 8004970 <atan+0x2d0>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f7fb fc9d 	bl	8000158 <__aeabi_dsub>
 800481e:	4632      	mov	r2, r6
 8004820:	463b      	mov	r3, r7
 8004822:	f7fb fe51 	bl	80004c8 <__aeabi_dmul>
 8004826:	a354      	add	r3, pc, #336	; (adr r3, 8004978 <atan+0x2d8>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fc94 	bl	8000158 <__aeabi_dsub>
 8004830:	4632      	mov	r2, r6
 8004832:	463b      	mov	r3, r7
 8004834:	f7fb fe48 	bl	80004c8 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4640      	mov	r0, r8
 800483e:	4649      	mov	r1, r9
 8004840:	f7fb fc8c 	bl	800015c <__adddf3>
 8004844:	4622      	mov	r2, r4
 8004846:	462b      	mov	r3, r5
 8004848:	f7fb fe3e 	bl	80004c8 <__aeabi_dmul>
 800484c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	d144      	bne.n	80048e0 <atan+0x240>
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fc7d 	bl	8000158 <__aeabi_dsub>
 800485e:	e734      	b.n	80046ca <atan+0x2a>
 8004860:	2200      	movs	r2, #0
 8004862:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <atan+0x2f4>)
 8004864:	f7fb fc78 	bl	8000158 <__aeabi_dsub>
 8004868:	2200      	movs	r2, #0
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	4b49      	ldr	r3, [pc, #292]	; (8004994 <atan+0x2f4>)
 8004870:	4620      	mov	r0, r4
 8004872:	4629      	mov	r1, r5
 8004874:	f7fb fc72 	bl	800015c <__adddf3>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	f7fb ff4c 	bl	800071c <__aeabi_ddiv>
 8004884:	f04f 0a01 	mov.w	sl, #1
 8004888:	4604      	mov	r4, r0
 800488a:	460d      	mov	r5, r1
 800488c:	e767      	b.n	800475e <atan+0xbe>
 800488e:	4b43      	ldr	r3, [pc, #268]	; (800499c <atan+0x2fc>)
 8004890:	429e      	cmp	r6, r3
 8004892:	dc1a      	bgt.n	80048ca <atan+0x22a>
 8004894:	2200      	movs	r2, #0
 8004896:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <atan+0x300>)
 8004898:	f7fb fc5e 	bl	8000158 <__aeabi_dsub>
 800489c:	2200      	movs	r2, #0
 800489e:	4606      	mov	r6, r0
 80048a0:	460f      	mov	r7, r1
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <atan+0x300>)
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fb fe0e 	bl	80004c8 <__aeabi_dmul>
 80048ac:	2200      	movs	r2, #0
 80048ae:	4b39      	ldr	r3, [pc, #228]	; (8004994 <atan+0x2f4>)
 80048b0:	f7fb fc54 	bl	800015c <__adddf3>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4630      	mov	r0, r6
 80048ba:	4639      	mov	r1, r7
 80048bc:	f7fb ff2e 	bl	800071c <__aeabi_ddiv>
 80048c0:	f04f 0a02 	mov.w	sl, #2
 80048c4:	4604      	mov	r4, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	e749      	b.n	800475e <atan+0xbe>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	2000      	movs	r0, #0
 80048d0:	4934      	ldr	r1, [pc, #208]	; (80049a4 <atan+0x304>)
 80048d2:	f7fb ff23 	bl	800071c <__aeabi_ddiv>
 80048d6:	f04f 0a03 	mov.w	sl, #3
 80048da:	4604      	mov	r4, r0
 80048dc:	460d      	mov	r5, r1
 80048de:	e73e      	b.n	800475e <atan+0xbe>
 80048e0:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <atan+0x308>)
 80048e2:	4e32      	ldr	r6, [pc, #200]	; (80049ac <atan+0x30c>)
 80048e4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80048e8:	4456      	add	r6, sl
 80048ea:	449a      	add	sl, r3
 80048ec:	e9da 2300 	ldrd	r2, r3, [sl]
 80048f0:	f7fb fc32 	bl	8000158 <__aeabi_dsub>
 80048f4:	4622      	mov	r2, r4
 80048f6:	462b      	mov	r3, r5
 80048f8:	f7fb fc2e 	bl	8000158 <__aeabi_dsub>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004904:	f7fb fc28 	bl	8000158 <__aeabi_dsub>
 8004908:	f1bb 0f00 	cmp.w	fp, #0
 800490c:	4604      	mov	r4, r0
 800490e:	460d      	mov	r5, r1
 8004910:	f6bf aee4 	bge.w	80046dc <atan+0x3c>
 8004914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004918:	461d      	mov	r5, r3
 800491a:	e6df      	b.n	80046dc <atan+0x3c>
 800491c:	4d24      	ldr	r5, [pc, #144]	; (80049b0 <atan+0x310>)
 800491e:	e6dd      	b.n	80046dc <atan+0x3c>
 8004920:	8800759c 	.word	0x8800759c
 8004924:	7e37e43c 	.word	0x7e37e43c
 8004928:	e322da11 	.word	0xe322da11
 800492c:	3f90ad3a 	.word	0x3f90ad3a
 8004930:	24760deb 	.word	0x24760deb
 8004934:	3fa97b4b 	.word	0x3fa97b4b
 8004938:	a0d03d51 	.word	0xa0d03d51
 800493c:	3fb10d66 	.word	0x3fb10d66
 8004940:	c54c206e 	.word	0xc54c206e
 8004944:	3fb745cd 	.word	0x3fb745cd
 8004948:	920083ff 	.word	0x920083ff
 800494c:	3fc24924 	.word	0x3fc24924
 8004950:	5555550d 	.word	0x5555550d
 8004954:	3fd55555 	.word	0x3fd55555
 8004958:	2c6a6c2f 	.word	0x2c6a6c2f
 800495c:	bfa2b444 	.word	0xbfa2b444
 8004960:	52defd9a 	.word	0x52defd9a
 8004964:	3fadde2d 	.word	0x3fadde2d
 8004968:	af749a6d 	.word	0xaf749a6d
 800496c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004970:	fe231671 	.word	0xfe231671
 8004974:	3fbc71c6 	.word	0x3fbc71c6
 8004978:	9998ebc4 	.word	0x9998ebc4
 800497c:	3fc99999 	.word	0x3fc99999
 8004980:	440fffff 	.word	0x440fffff
 8004984:	7ff00000 	.word	0x7ff00000
 8004988:	54442d18 	.word	0x54442d18
 800498c:	3ff921fb 	.word	0x3ff921fb
 8004990:	3fdbffff 	.word	0x3fdbffff
 8004994:	3ff00000 	.word	0x3ff00000
 8004998:	3ff2ffff 	.word	0x3ff2ffff
 800499c:	40037fff 	.word	0x40037fff
 80049a0:	3ff80000 	.word	0x3ff80000
 80049a4:	bff00000 	.word	0xbff00000
 80049a8:	08004e30 	.word	0x08004e30
 80049ac:	08004e10 	.word	0x08004e10
 80049b0:	bff921fb 	.word	0xbff921fb

080049b4 <fabs>:
 80049b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049b8:	4619      	mov	r1, r3
 80049ba:	4770      	bx	lr

080049bc <atan2>:
 80049bc:	f000 b854 	b.w	8004a68 <__ieee754_atan2>

080049c0 <sqrt>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	b08b      	sub	sp, #44	; 0x2c
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	f000 f92b 	bl	8004c24 <__ieee754_sqrt>
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <sqrt+0xa0>)
 80049d0:	4680      	mov	r8, r0
 80049d2:	f993 a000 	ldrsb.w	sl, [r3]
 80049d6:	4689      	mov	r9, r1
 80049d8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80049dc:	d02b      	beq.n	8004a36 <sqrt+0x76>
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7fc f809 	bl	80009fc <__aeabi_dcmpun>
 80049ea:	4683      	mov	fp, r0
 80049ec:	bb18      	cbnz	r0, 8004a36 <sqrt+0x76>
 80049ee:	2600      	movs	r6, #0
 80049f0:	2700      	movs	r7, #0
 80049f2:	4632      	mov	r2, r6
 80049f4:	463b      	mov	r3, r7
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7fb ffd7 	bl	80009ac <__aeabi_dcmplt>
 80049fe:	b1d0      	cbz	r0, 8004a36 <sqrt+0x76>
 8004a00:	2301      	movs	r3, #1
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <sqrt+0xa4>)
 8004a06:	f8cd b020 	str.w	fp, [sp, #32]
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004a10:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a14:	f1ba 0f00 	cmp.w	sl, #0
 8004a18:	d112      	bne.n	8004a40 <sqrt+0x80>
 8004a1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004a1e:	4668      	mov	r0, sp
 8004a20:	f000 f9ac 	bl	8004d7c <matherr>
 8004a24:	b1b8      	cbz	r0, 8004a56 <sqrt+0x96>
 8004a26:	9b08      	ldr	r3, [sp, #32]
 8004a28:	b11b      	cbz	r3, 8004a32 <sqrt+0x72>
 8004a2a:	f7ff f9f5 	bl	8003e18 <__errno>
 8004a2e:	9b08      	ldr	r3, [sp, #32]
 8004a30:	6003      	str	r3, [r0, #0]
 8004a32:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004a36:	4640      	mov	r0, r8
 8004a38:	4649      	mov	r1, r9
 8004a3a:	b00b      	add	sp, #44	; 0x2c
 8004a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a40:	4632      	mov	r2, r6
 8004a42:	463b      	mov	r3, r7
 8004a44:	4630      	mov	r0, r6
 8004a46:	4639      	mov	r1, r7
 8004a48:	f7fb fe68 	bl	800071c <__aeabi_ddiv>
 8004a4c:	f1ba 0f02 	cmp.w	sl, #2
 8004a50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a54:	d1e3      	bne.n	8004a1e <sqrt+0x5e>
 8004a56:	f7ff f9df 	bl	8003e18 <__errno>
 8004a5a:	2321      	movs	r3, #33	; 0x21
 8004a5c:	6003      	str	r3, [r0, #0]
 8004a5e:	e7e2      	b.n	8004a26 <sqrt+0x66>
 8004a60:	20000100 	.word	0x20000100
 8004a64:	08004e50 	.word	0x08004e50

08004a68 <__ieee754_atan2>:
 8004a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	4256      	negs	r6, r2
 8004a6e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8004a72:	4316      	orrs	r6, r2
 8004a74:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8004c20 <__ieee754_atan2+0x1b8>
 8004a78:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8004a7c:	454e      	cmp	r6, r9
 8004a7e:	4604      	mov	r4, r0
 8004a80:	460d      	mov	r5, r1
 8004a82:	469e      	mov	lr, r3
 8004a84:	d808      	bhi.n	8004a98 <__ieee754_atan2+0x30>
 8004a86:	4246      	negs	r6, r0
 8004a88:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004a8c:	4306      	orrs	r6, r0
 8004a8e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8004a92:	454e      	cmp	r6, r9
 8004a94:	4688      	mov	r8, r1
 8004a96:	d906      	bls.n	8004aa6 <__ieee754_atan2+0x3e>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fb fb5e 	bl	800015c <__adddf3>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	e030      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004aa6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8004aaa:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8004aae:	4316      	orrs	r6, r2
 8004ab0:	d103      	bne.n	8004aba <__ieee754_atan2+0x52>
 8004ab2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	f7ff bdf3 	b.w	80046a0 <atan>
 8004aba:	179e      	asrs	r6, r3, #30
 8004abc:	f006 0602 	and.w	r6, r6, #2
 8004ac0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8004ac4:	ea57 0100 	orrs.w	r1, r7, r0
 8004ac8:	d107      	bne.n	8004ada <__ieee754_atan2+0x72>
 8004aca:	2e02      	cmp	r6, #2
 8004acc:	d079      	beq.n	8004bc2 <__ieee754_atan2+0x15a>
 8004ace:	2e03      	cmp	r6, #3
 8004ad0:	d11a      	bne.n	8004b08 <__ieee754_atan2+0xa0>
 8004ad2:	a541      	add	r5, pc, #260	; (adr r5, 8004bd8 <__ieee754_atan2+0x170>)
 8004ad4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ad8:	e016      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004ada:	ea5c 0102 	orrs.w	r1, ip, r2
 8004ade:	d106      	bne.n	8004aee <__ieee754_atan2+0x86>
 8004ae0:	f1b8 0f00 	cmp.w	r8, #0
 8004ae4:	da71      	bge.n	8004bca <__ieee754_atan2+0x162>
 8004ae6:	a53e      	add	r5, pc, #248	; (adr r5, 8004be0 <__ieee754_atan2+0x178>)
 8004ae8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004aec:	e00c      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004aee:	45cc      	cmp	ip, r9
 8004af0:	d123      	bne.n	8004b3a <__ieee754_atan2+0xd2>
 8004af2:	4567      	cmp	r7, ip
 8004af4:	d114      	bne.n	8004b20 <__ieee754_atan2+0xb8>
 8004af6:	2e02      	cmp	r6, #2
 8004af8:	d00a      	beq.n	8004b10 <__ieee754_atan2+0xa8>
 8004afa:	2e03      	cmp	r6, #3
 8004afc:	d00c      	beq.n	8004b18 <__ieee754_atan2+0xb0>
 8004afe:	2e01      	cmp	r6, #1
 8004b00:	d15b      	bne.n	8004bba <__ieee754_atan2+0x152>
 8004b02:	a539      	add	r5, pc, #228	; (adr r5, 8004be8 <__ieee754_atan2+0x180>)
 8004b04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	a537      	add	r5, pc, #220	; (adr r5, 8004bf0 <__ieee754_atan2+0x188>)
 8004b12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b16:	e7f7      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004b18:	a537      	add	r5, pc, #220	; (adr r5, 8004bf8 <__ieee754_atan2+0x190>)
 8004b1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b1e:	e7f3      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004b20:	2e02      	cmp	r6, #2
 8004b22:	d04e      	beq.n	8004bc2 <__ieee754_atan2+0x15a>
 8004b24:	2e03      	cmp	r6, #3
 8004b26:	d0d4      	beq.n	8004ad2 <__ieee754_atan2+0x6a>
 8004b28:	2e01      	cmp	r6, #1
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	d102      	bne.n	8004b36 <__ieee754_atan2+0xce>
 8004b30:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004b34:	e7e8      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004b36:	2500      	movs	r5, #0
 8004b38:	e7e6      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004b3a:	454f      	cmp	r7, r9
 8004b3c:	d0d0      	beq.n	8004ae0 <__ieee754_atan2+0x78>
 8004b3e:	eba7 070c 	sub.w	r7, r7, ip
 8004b42:	153f      	asrs	r7, r7, #20
 8004b44:	2f3c      	cmp	r7, #60	; 0x3c
 8004b46:	dc1e      	bgt.n	8004b86 <__ieee754_atan2+0x11e>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da01      	bge.n	8004b50 <__ieee754_atan2+0xe8>
 8004b4c:	373c      	adds	r7, #60	; 0x3c
 8004b4e:	db1e      	blt.n	8004b8e <__ieee754_atan2+0x126>
 8004b50:	4620      	mov	r0, r4
 8004b52:	4629      	mov	r1, r5
 8004b54:	f7fb fde2 	bl	800071c <__aeabi_ddiv>
 8004b58:	f7ff ff2c 	bl	80049b4 <fabs>
 8004b5c:	f7ff fda0 	bl	80046a0 <atan>
 8004b60:	4604      	mov	r4, r0
 8004b62:	460d      	mov	r5, r1
 8004b64:	2e01      	cmp	r6, #1
 8004b66:	d015      	beq.n	8004b94 <__ieee754_atan2+0x12c>
 8004b68:	2e02      	cmp	r6, #2
 8004b6a:	d017      	beq.n	8004b9c <__ieee754_atan2+0x134>
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	d0cb      	beq.n	8004b08 <__ieee754_atan2+0xa0>
 8004b70:	a323      	add	r3, pc, #140	; (adr r3, 8004c00 <__ieee754_atan2+0x198>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f7fb faed 	bl	8000158 <__aeabi_dsub>
 8004b7e:	a322      	add	r3, pc, #136	; (adr r3, 8004c08 <__ieee754_atan2+0x1a0>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	e016      	b.n	8004bb4 <__ieee754_atan2+0x14c>
 8004b86:	a522      	add	r5, pc, #136	; (adr r5, 8004c10 <__ieee754_atan2+0x1a8>)
 8004b88:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b8c:	e7ea      	b.n	8004b64 <__ieee754_atan2+0xfc>
 8004b8e:	2400      	movs	r4, #0
 8004b90:	2500      	movs	r5, #0
 8004b92:	e7e7      	b.n	8004b64 <__ieee754_atan2+0xfc>
 8004b94:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004b98:	461d      	mov	r5, r3
 8004b9a:	e7b5      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004b9c:	a318      	add	r3, pc, #96	; (adr r3, 8004c00 <__ieee754_atan2+0x198>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	f7fb fad7 	bl	8000158 <__aeabi_dsub>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	a116      	add	r1, pc, #88	; (adr r1, 8004c08 <__ieee754_atan2+0x1a0>)
 8004bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bb4:	f7fb fad0 	bl	8000158 <__aeabi_dsub>
 8004bb8:	e772      	b.n	8004aa0 <__ieee754_atan2+0x38>
 8004bba:	a517      	add	r5, pc, #92	; (adr r5, 8004c18 <__ieee754_atan2+0x1b0>)
 8004bbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004bc0:	e7a2      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004bc2:	a511      	add	r5, pc, #68	; (adr r5, 8004c08 <__ieee754_atan2+0x1a0>)
 8004bc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004bc8:	e79e      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004bca:	a511      	add	r5, pc, #68	; (adr r5, 8004c10 <__ieee754_atan2+0x1a8>)
 8004bcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004bd0:	e79a      	b.n	8004b08 <__ieee754_atan2+0xa0>
 8004bd2:	bf00      	nop
 8004bd4:	f3af 8000 	nop.w
 8004bd8:	54442d18 	.word	0x54442d18
 8004bdc:	c00921fb 	.word	0xc00921fb
 8004be0:	54442d18 	.word	0x54442d18
 8004be4:	bff921fb 	.word	0xbff921fb
 8004be8:	54442d18 	.word	0x54442d18
 8004bec:	bfe921fb 	.word	0xbfe921fb
 8004bf0:	7f3321d2 	.word	0x7f3321d2
 8004bf4:	4002d97c 	.word	0x4002d97c
 8004bf8:	7f3321d2 	.word	0x7f3321d2
 8004bfc:	c002d97c 	.word	0xc002d97c
 8004c00:	33145c07 	.word	0x33145c07
 8004c04:	3ca1a626 	.word	0x3ca1a626
 8004c08:	54442d18 	.word	0x54442d18
 8004c0c:	400921fb 	.word	0x400921fb
 8004c10:	54442d18 	.word	0x54442d18
 8004c14:	3ff921fb 	.word	0x3ff921fb
 8004c18:	54442d18 	.word	0x54442d18
 8004c1c:	3fe921fb 	.word	0x3fe921fb
 8004c20:	7ff00000 	.word	0x7ff00000

08004c24 <__ieee754_sqrt>:
 8004c24:	4b54      	ldr	r3, [pc, #336]	; (8004d78 <__ieee754_sqrt+0x154>)
 8004c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	438b      	bics	r3, r1
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	460a      	mov	r2, r1
 8004c32:	460c      	mov	r4, r1
 8004c34:	d10f      	bne.n	8004c56 <__ieee754_sqrt+0x32>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	f7fb fc45 	bl	80004c8 <__aeabi_dmul>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4630      	mov	r0, r6
 8004c44:	4629      	mov	r1, r5
 8004c46:	f7fb fa89 	bl	800015c <__adddf3>
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	4630      	mov	r0, r6
 8004c50:	4629      	mov	r1, r5
 8004c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c56:	2900      	cmp	r1, #0
 8004c58:	4607      	mov	r7, r0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	dc0e      	bgt.n	8004c7c <__ieee754_sqrt+0x58>
 8004c5e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004c62:	ea5c 0707 	orrs.w	r7, ip, r7
 8004c66:	d0f2      	beq.n	8004c4e <__ieee754_sqrt+0x2a>
 8004c68:	b141      	cbz	r1, 8004c7c <__ieee754_sqrt+0x58>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	f7fb fa73 	bl	8000158 <__aeabi_dsub>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	f7fb fd51 	bl	800071c <__aeabi_ddiv>
 8004c7a:	e7e6      	b.n	8004c4a <__ieee754_sqrt+0x26>
 8004c7c:	1512      	asrs	r2, r2, #20
 8004c7e:	d074      	beq.n	8004d6a <__ieee754_sqrt+0x146>
 8004c80:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004c84:	07d5      	lsls	r5, r2, #31
 8004c86:	f04f 0500 	mov.w	r5, #0
 8004c8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004c8e:	bf48      	it	mi
 8004c90:	0fd9      	lsrmi	r1, r3, #31
 8004c92:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8004c96:	bf44      	itt	mi
 8004c98:	005b      	lslmi	r3, r3, #1
 8004c9a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8004c9e:	1051      	asrs	r1, r2, #1
 8004ca0:	0fda      	lsrs	r2, r3, #31
 8004ca2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	2216      	movs	r2, #22
 8004caa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	1987      	adds	r7, r0, r6
 8004cb2:	42a7      	cmp	r7, r4
 8004cb4:	bfde      	ittt	le
 8004cb6:	19b8      	addle	r0, r7, r6
 8004cb8:	1be4      	suble	r4, r4, r7
 8004cba:	19ad      	addle	r5, r5, r6
 8004cbc:	0fdf      	lsrs	r7, r3, #31
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8004cc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004cc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004ccc:	d1f0      	bne.n	8004cb0 <__ieee754_sqrt+0x8c>
 8004cce:	f04f 0c20 	mov.w	ip, #32
 8004cd2:	4696      	mov	lr, r2
 8004cd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004cd8:	4284      	cmp	r4, r0
 8004cda:	eb06 070e 	add.w	r7, r6, lr
 8004cde:	dc02      	bgt.n	8004ce6 <__ieee754_sqrt+0xc2>
 8004ce0:	d112      	bne.n	8004d08 <__ieee754_sqrt+0xe4>
 8004ce2:	429f      	cmp	r7, r3
 8004ce4:	d810      	bhi.n	8004d08 <__ieee754_sqrt+0xe4>
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	eb07 0e06 	add.w	lr, r7, r6
 8004cec:	da42      	bge.n	8004d74 <__ieee754_sqrt+0x150>
 8004cee:	f1be 0f00 	cmp.w	lr, #0
 8004cf2:	db3f      	blt.n	8004d74 <__ieee754_sqrt+0x150>
 8004cf4:	f100 0801 	add.w	r8, r0, #1
 8004cf8:	1a24      	subs	r4, r4, r0
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	429f      	cmp	r7, r3
 8004cfe:	bf88      	it	hi
 8004d00:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8004d04:	1bdb      	subs	r3, r3, r7
 8004d06:	4432      	add	r2, r6
 8004d08:	0064      	lsls	r4, r4, #1
 8004d0a:	f1bc 0c01 	subs.w	ip, ip, #1
 8004d0e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8004d12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d1a:	d1dd      	bne.n	8004cd8 <__ieee754_sqrt+0xb4>
 8004d1c:	4323      	orrs	r3, r4
 8004d1e:	d006      	beq.n	8004d2e <__ieee754_sqrt+0x10a>
 8004d20:	1c54      	adds	r4, r2, #1
 8004d22:	bf0b      	itete	eq
 8004d24:	4662      	moveq	r2, ip
 8004d26:	3201      	addne	r2, #1
 8004d28:	3501      	addeq	r5, #1
 8004d2a:	f022 0201 	bicne.w	r2, r2, #1
 8004d2e:	106b      	asrs	r3, r5, #1
 8004d30:	0852      	lsrs	r2, r2, #1
 8004d32:	07e8      	lsls	r0, r5, #31
 8004d34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004d38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004d3c:	bf48      	it	mi
 8004d3e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004d42:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8004d46:	4616      	mov	r6, r2
 8004d48:	e781      	b.n	8004c4e <__ieee754_sqrt+0x2a>
 8004d4a:	0adc      	lsrs	r4, r3, #11
 8004d4c:	3915      	subs	r1, #21
 8004d4e:	055b      	lsls	r3, r3, #21
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	d0fa      	beq.n	8004d4a <__ieee754_sqrt+0x126>
 8004d54:	02e6      	lsls	r6, r4, #11
 8004d56:	d50a      	bpl.n	8004d6e <__ieee754_sqrt+0x14a>
 8004d58:	f1c2 0020 	rsb	r0, r2, #32
 8004d5c:	fa23 f000 	lsr.w	r0, r3, r0
 8004d60:	1e55      	subs	r5, r2, #1
 8004d62:	4093      	lsls	r3, r2
 8004d64:	4304      	orrs	r4, r0
 8004d66:	1b4a      	subs	r2, r1, r5
 8004d68:	e78a      	b.n	8004c80 <__ieee754_sqrt+0x5c>
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	e7f0      	b.n	8004d50 <__ieee754_sqrt+0x12c>
 8004d6e:	0064      	lsls	r4, r4, #1
 8004d70:	3201      	adds	r2, #1
 8004d72:	e7ef      	b.n	8004d54 <__ieee754_sqrt+0x130>
 8004d74:	4680      	mov	r8, r0
 8004d76:	e7bf      	b.n	8004cf8 <__ieee754_sqrt+0xd4>
 8004d78:	7ff00000 	.word	0x7ff00000

08004d7c <matherr>:
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4770      	bx	lr

08004d80 <_init>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr

08004d8c <_fini>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr
